<?php
/**
 * @file
 * Tests for questionnaire.module
 */

/**
 * Provides common helper methods for Questionnaire module tests.
 */
class QuestionnaireWebTestCase extends DrupalWebTestCase {
  protected $user;
  protected $authenticateduser;

  /**
   * Function that creates a user with the administrator role.
   */
  public function drupalCreateAdminUser(array $permissions = array('view questions', 'submit questions', 'create questionnaire_question', 'view questionnaire answers', 'edit any questionnaire_question', 'delete any questionnaire_question', 'view questionnaire', 'administer questionnaire')) {
    $roles = user_roles();
    $index = array_search('administrator', $roles);
    $user = $this->drupalCreateUser($permissions);
    $user->roles[$index] = 'administrator';
    return user_save($user);
  }
  /**
   * Function that creates an authenticated user.
   */
  public function drupalCreateAuthUser(array $permissions = array('view questions', 'submit questions', 'create questionnaire_question', 'view questionnaire answers', 'view questionnaire')) {
    $roles = user_roles();
    $index = array_search('authenticated user', $roles);
    $user = $this->drupalCreateUser($permissions);
    $user->roles[$index] = 'authenticated user';
    return user_save($user);
  }
  /**
   * Function that creates a question with a selectlist.
   */
  public function createSelectTypeQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your gender?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'Male';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Female';
    $this->drupalPost(NULL, $question, t('Save'));
  }
  /**
   * Function that creates a checkboxes type question.
   */
  public function createCheckboxesTypeQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave type of rock?';
    $question['questionnaire_question_type[und]'] = 'checkboxes';
    $question['questionnaire_question_options[und][0][value]'] = 'Classic Rock';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Hard Rock';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Punk Rock';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Soft Rock';
    $this->drupalPost(NULL, $question, t('Save'));
  }
  /**
   * Function that creates a radio button type question.
   */
  public function createRadioTypeQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave colour?';
    $question['questionnaire_question_type[und]'] = 'radios';
    $question['questionnaire_question_options[und][0][value]'] = 'Black';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Blue';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Grey';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Purple';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][4][value]'] = 'Pink';
    $this->drupalPost(NULL, $question, t('Save'));
  }
  /**
   * Function that creates a number type question.
   */
  public function createNumberTypeQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave number?';
    $question['questionnaire_question_type[und]'] = 'number';
    $this->drupalPost(NULL, $question, t('Save'));
  }
  /**
   * Function that creates a message type question.
   */
  public function createMessageTypeQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Thank you for filling this questionnaire.';
    $question['questionnaire_question_type[und]'] = 'message';
    $this->drupalPost(NULL, $question, t('Save'));
  }
  /**
   * Function that creates an open question.
   */
  public function createOpenQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your first name?';
    $question['questionnaire_question_type[und]'] = 'open';
    $this->drupalPost(NULL, $question, t('Save'));
  }
  
  /**
   * Function that creates a taxonomy type question.
   */
  public function createTaxonomyTypeQuestion() {
    //Create a vocabulary
    $this->createVocabulary();
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Who is your favourite artist?';
    $question['questionnaire_question_type[und]'] = 'taxonomy';
    $question['qq_options_vocabulary[und]'] = 'artists';
    $this->drupalPost(NULL, $question, t('Save'));
  }
  
  /**
   * Function that creates a questionnaire with Active Status.
   */
  public function createActiveQuestionnaire() {
    $this->createSelectTypeQuestion();
    $this->createCheckboxesTypeQuestion();
    $this->createRadioTypeQuestion();
    $this->createNumberTypeQuestion();
    $this->createOpenQuestion();
    $this->createTaxonomyTypeQuestion();
    $this->createMessageTypeQuestion();
    $this->drupalGet("node/add/questionnaire");
    $questionnaire['title'] = 'Active Questionnaire';
    $questionnaire['qstatus'] = 'Active';
    $questionnaire['field_questionnaire_questions[und][0][field_questionnaire_qq][und][0][target_id]'] = 'What is your gender? (1)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][1][field_questionnaire_qq][und][0][target_id]'] = 'What is your fave type of rock? (2)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][2][field_questionnaire_qq][und][0][target_id]'] = 'What is your fave colour? (3)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][3][field_questionnaire_qq][und][0][target_id]'] = 'What is your fave number? (4)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][4][field_questionnaire_qq][und][0][target_id]'] = 'What is your first name? (5)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][5][field_questionnaire_qq][und][0][target_id]'] = 'Who is your favourite artist? (6)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][6][field_questionnaire_qq][und][0][target_id]'] = 'Thank you for filling this questionnaire. (7)';
    $questionnaire['field_questionnaire_questions[und][6][field_questionnaire_qendpoint][und]'] = TRUE;
    $this->drupalPost(NULL, $questionnaire, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been created.'), t('Questionnaire created successfully.'));
  }
  
  /**
   * Function that creates a questionnaire in preparation.
   */
  public function createQuestionnaireInPreparation() {
    $this->createSelectTypeQuestion();
    $this->drupalGet("node/add/questionnaire");
    $questionnaire['title'] = 'Questionnaire In Preparation';
    $questionnaire['qstatus'] = 'In Preparation';
    $questionnaire['field_questionnaire_questions[und][0][field_questionnaire_qq][und][0][target_id]'] = 'What is your gender? (1)';
    $this->drupalPost(NULL, $questionnaire, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been created.'), t('Questionnaire created successfully.'));
  }
  
  /**
   * Function that creates a questionnaire with Closed Status.
   */
  public function createClosedQuestionnaire() {
    $this->createSelectTypeQuestion();
    $this->drupalGet("node/add/questionnaire");
    $questionnaire['title'] = 'Closed Questionnaire';
    $questionnaire['qstatus'] = 'Closed';
    $questionnaire['field_questionnaire_questions[und][0][field_questionnaire_qq][und][0][target_id]'] = 'What is your gender? (1)';
    $this->drupalPost(NULL, $questionnaire, t('Save'));
    $this->assertText('Questionnaire ' . $questionnaire['title'] . ' has been created.', 'Questionnaire created successfully.');
  }

  /**
   * Function that adds a submission to an active questionnaire.
   */
  public function addSubmission() {
    $this->createActiveQuestionnaire();
    $this->drupalGet("node/8");
    $this->assertLink(t('Add Submission'), 0, t('Add submission link is present on page'));
    $this->clickLink(t('Add Submission'));
    $answers['1'] = 'Female';
    $answers['2[Classic Rock]'] = TRUE;    
    $answers['2[Soft Rock]'] = TRUE;
    $answers['3'] = 'Purple';
    $answers['4'] = 18;
    $answers['5'] = 'Sophie';
    $answers['6'] = 'ACDC';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
  }

  /**
   * Function that creates a vocabulary and adds two terms to it.
   */
  public function createVocabulary() {
    $vocabulary = new stdClass();
    $vocabulary->name = 'Artists';
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = 'artists';
    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;

    // Create 2 new terms programmatically.
    $newterm = new stdClass();
    $newterm->name = 'ACDC';
    $newterm->vid = $vid;
    $newterm->parent = 0;
    taxonomy_term_save($newterm);

    $newterm1 = new stdClass();
    $newterm1->name = 'Laura Marling';
    $newterm1->vid = $vid;
    $newterm1->parent = 0;
    taxonomy_term_save($newterm1);
    return $vocabulary;
  }
  
  /**
   * Function that creates a questionnaire from an article.
   */
  public function createQuestionnaireFromNode() {
    //Create a vocabulary
    $this->createVocabulary();
    
    // Add a term reference field for the vocabulary to the article nodetype.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $field['fields[_add_new_field][label]'] = 'artist';
    $field['fields[_add_new_field][field_name]'] = 'artist';
    $field['fields[_add_new_field][type]'] = 'taxonomy_term_reference';
    $field['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $field, t('Save'));
    $vocab['field[settings][allowed_values][0][vocabulary]'] = 'artists';
    $this->drupalPost(NULL, $vocab, t('Save field settings'));
    $this->drupalPost(NULL, NULL, t('Save settings'));   
    $this->drupalPost(NULL, NULL, t('Save'));
    
    // Edit the structure of the article content type.
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this
    // content type.
    $options['questionnaire_question_isquestionnaire'] = TRUE;
    $options['questionnaire_question_copy_termfields_from_context'] = TRUE;
    $options['questionnaire_question_vocabulary'] = 'artists';
    $options['questionnaire_question_context'] = '';
    $this->drupalPost(NULL, $options, t('Save content type'));
    
    
    // Add a term reference field for the vocabulary to the question nodetype.
    $this->drupalGet('admin/structure/types/manage/questionnaire_question/fields');
    $tag['fields[_add_existing_field][label]'] = 'artist';
    $tag['fields[_add_existing_field][field_name]'] = 'field_artist';
    $tag['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $tag, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    
    
    //Add Two questions with the same artist attached to them.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Hard rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the instruments.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));

    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Do you consider ACDC metal?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'Yes, I do.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'No, I don\'t.';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    
    // Create an article and tag it with the same artist as the questions.
    $this->drupalGet('node/add/article');
    $article['title'] = 'Test Article';
    $article['body[und][0][value]'] = 'This article should have a questionnaire with the question about hard rock.';
    $article['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $article, t('Save'));

  }

  /**
   *  Function that creates the Song content type
   */
  public function createSong() {
    $this->drupalGet('admin/structure/types/add');
    $type['name'] = 'Song';
    $type['type'] = 'song';
    $type['description'] = '';
    $this->drupalPost(NULL, $type, t('Save and add fields'));
    $field['fields[_add_new_field][label]'] = 'artist';
    $field['fields[_add_new_field][field_name]'] = 'artist';
    $field['fields[_add_new_field][type]'] = 'taxonomy_term_reference';
    $field['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $field, t('Save'));
    $vocab['field[settings][allowed_values][0][vocabulary]'] = 'artists';
    $this->drupalPost(NULL, $vocab, t('Save field settings'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    $this->drupalPost(NULL, NULL, t('Save'));
  }
  
  /**
   * Function that creates a questionnaire with a context that is not the same 
   * as the questionnaire.
   */
  public function createQuestionnaireFromNodeDifferentContext() {
    // Create a vocabulary.
    $this->createVocabulary();
    
    // Create the song entity
    $this->createSong();
    
    // Add a term reference field for the vocabulary to the article nodetype.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $field['fields[_add_new_field][label]'] = 'song';
    $field['fields[_add_new_field][field_name]'] = 'song';
    $field['fields[_add_new_field][type]'] = 'entityreference';
    $field['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $field, t('Save'));
    $bundle['field[settings][handler_settings][target_bundles][song]'] = 'TRUE';
    $this->drupalPost(NULL, $bundle, t('Save field settings'));
    $this->drupalPost(NULL, NULL, t('Save settings'));   
    $this->drupalPost(NULL, NULL, t('Save'));
    
    // Edit the structure of the article content type.
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this 
    // content type.
    $options['questionnaire_question_isquestionnaire'] = TRUE;
    $options['questionnaire_question_copy_termfields_from_context'] = TRUE;
    $options['questionnaire_question_vocabulary'] = 'artists';
    $options['questionnaire_question_context'] = 'field_song';
    $this->drupalPost(NULL, $options, t('Save content type'));
    
    
    // Add a term reference field for the vocabulary to the question nodetype.
    $this->drupalGet('admin/structure/types/manage/questionnaire_question/fields');
    $tag['fields[_add_existing_field][label]'] = 'artist';
    $tag['fields[_add_existing_field][field_name]'] = 'field_artist';
    $tag['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $tag, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings')); 
    $this->drupalPost(NULL, NULL, t('Save'));
    
    
    //Add Two questions with the same artist attached to them.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Hard rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the instruments.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));

    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Do you consider ACDC metal?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'Yes, I do.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'No, I don\'t.';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    
    //Create a Song and tag it with the same artist as the questions.
    $this->drupalGet('node/add/song');
    $song['title'] = 'Long way to the top';
    $song['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $song, t('Save'));
    
    // Create an article and tag it with the song.
    $this->drupalGet('node/add/article');
    $article['title'] = 'Test Article';
    $article['body[und][0][value]'] = 'This article should have a questionnaire with the question about hard rock.';
    $article['field_song[und]'] = '3';
    $this->drupalPost(NULL, $article, t('Save'));
    
  }
}

/**
 * Tests the various access restrictions of the questionnaire module.
 */
class QuestionnaireAccessRestrictionTestCase extends QuestionnaireWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => t('Questionnaire Access Restriction'),
      'description' => t('Tests the various access restrictions of the questionnaire module.'),
      'group' => t('Questionnaire'));
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('questionnaire'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }

  /**
   * Test that an administrator can access the Add Question page.
   */
  public function testAddQuestionAccessibilty() {
    // Navigate to the Add Question page.
    $this->drupalGet("node/add/questionnaire-question");
    $this->assertResponse(200, t('The administrator can access the Add Question page.'));
  }
  
  /**
   * Test that an anonymous user cannot access the Add Question page.
   */
  public function testAddQuestionAccessibiltyAnonymous() {
    // Log the current user out.
    $this->drupalLogout();
    // Navigate to the Add Question page.
    $this->drupalGet("node/add/questionnaire-question");
    $this->assertResponse(403, t('An anonymous cannot access the Add Question page.'));
  }

  /**
   * Test that an administrator can access the Question Structure page.
   */
  public function testQuestionStructureAccessibilty() {
    // Navigate to the Question Structure page.
    $this->drupalGet("admin/structure/types/manage/questionnaire_question");
    $this->assertResponse(200, t('The administrator can access the Question Structure page.'));
  }

  /**
   * Test that an anonymous user cannot access the Question Structure page.
   */
  public function testQuestionStructureAccessibiltyAnonymous() {
    // Log the current user out.
    $this->drupalLogout();
    // Navigate to the Question Structure page.
    $this->drupalGet("admin/structure/types/manage/questionnaire_question");
    $this->assertResponse(403, t('An anonymous cannot access the Question Structure page.'));
  }
  
  /**
   * Test that an administrator can access the Add Questionnaire page.
   */
  public function testAddQuestionnaireAccessibilty() {
    // Navigate to the Add Questionnaire page.
    $this->drupalGet("node/add/questionnaire");
    $this->assertResponse(200, t('The administrator can access the Add Questionnaire page.'));
  }
  
  /**
   * Test that an anonymous user cannot access the Add Questionnaire page.
   */
  public function testAddQuestionnaireAccessibiltyAnonymous() {
    $this->drupalLogout();
    // Navigate to the Add Question page.
    $this->drupalGet("node/add/questionnaire");
    $this->assertResponse(403, t('An anonymous user cannot access the Add Questionnaire page.'));
  }
  
  
  /**
   * Test that an administrator can access the Questionnaire Structure page.
   */
  public function testQuestionnaireStructureAccessibilty() {
    // Navigate to the Questionnaire Structure page.
    $this->drupalGet("admin/structure/types/manage/questionnaire");
    $this->assertResponse(200, t('The administrator can access the Questionnaire Structure page.'));
  }
  
  
  /**
   * Test that an anonymous user cannot access the Questionnaire Structure page.
   */
  public function testQuestionnaireStructureAccessibiltyAnonymous() {
    $this->drupalLogout();
    // Navigate to the Questionnaire Structure page.
    $this->drupalGet("admin/structure/types/manage/questionnaire");
    $this->assertResponse(403, t('An anonymous user cannot access the Questionnaire Structure page.'));
  }
  
  /**
   * Test whether an administrator can view the Questionnaire Submissions page.
   */
  public function testQuestionnaireSubmissionsPageAccessibilty() {
    $this->addSubmission();
    $this->drupalGet("node/8/submissions");
    $this->assertResponse(200, t('The administrator can access the Questionnaire Submissions page.'));
  }
  
  /**
   * Test that an anonymous user cannot view the Questionnaire Submissions page.
   */
  public function testQuestionnaireSubmissionsPageAccessibiltyAnonymous() {
    $this->addSubmission();
    $this->drupalLogout();
    // Navigate to the questionnaires submissions page
    $this->drupalGet("node/6/submissions");
    $this->assertResponse(403, t('An anonymous user cannot access the Questionnaire Submissions page.'));
  }
  
  /**
   * Test whether an authenticated user can access their own submission to a 
   * native questionnaire.
   */
  public function testAuthUserAccessOwnSubmissionToNativeQuestionnaire() {
    $this->createActiveQuestionnaire();
    $this->drupalLogout();
    $authuser = $this->drupalCreateAuthUser();
    $this->drupalLogin($authuser);
    
    $this->drupalGet("node/8");
    $this->clickLink(t('Add Submission'), 0);
    $answers['1'] = 'Female';
    $answers['2[Classic Rock]'] = TRUE;    
    $answers['2[Soft Rock]'] = TRUE;
    $answers['3'] = 'Purple';
    $answers['4'] = 18;
    $answers['5'] = 'Sophie';
    $answers['6'] = 'ACDC';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    $this->drupalGet("node/8/submissions");
    $this->clickLink(t('edit'), 0);
    $this->assertNoResponse(403, t('An authenticated user can access their own submission to a native questionnaire.'));
    $this->assertText(t('Questionnaire for Active Questionnaire'), t('Questionnaire edit form displayed on page.'));    
  }
  
  /**
   * Test whether an authenticated user can access another users submission to a 
   * native questionnaire.
   */
  public function testAuthUserAccessAnySubmissionToNativeQuestionnaire() {
    $this->addSubmission();
    
    $this->drupalLogout();
    $authuser = $this->drupalCreateAuthUser();
    $this->drupalLogin($authuser);
    
    $this->drupalGet("node/8/submissions");
    $this->clickLink(t('edit'), 0);
    $this->assertResponse(403, t('An authenticated user can not access any submission to a native questionnaire.'));
    $this->assertText(t('You are not authorized to access this page.'), t('Questionnaire edit form not displayed on page.'));    
  }
  
  /**
   * Test whether an authenticated user can access their own submission to a 
   * questionnaire created from a node.
   */
  public function testAuthUserAccessOwnSubmissionToQuestionnaireFromNode() {
    $this->createQuestionnaireFromNode();
    $this->drupalLogout();
    $authuser = $this->drupalCreateAuthUser();
    $this->drupalLogin($authuser);
    
    $this->drupalGet('node/3');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    $this->drupalGet('node/3/submissions');
    
    $this->clickLink(t('edit'), 0);
    $this->assertNoResponse(403, t('An authenticated user can access their own submission to a questionnaire created from a node.'));
    $this->assertText(t('Questionnaire for Test Article'), t('Questionnaire edit form displayed on page.'));    
  }
  
  /**
   * Test whether an authenticated user can access another users submission to a 
   * questionnaire created from a node.
   */
  public function testAuthUserAccessAnySubmissionToQuestionnaireFromNode() {
    $this->createQuestionnaireFromNode();
    
    $this->drupalGet('node/3');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    $this->drupalLogout();
    $authuser = $this->drupalCreateAuthUser();
    $this->drupalLogin($authuser);
    
    $this->drupalGet('node/3/submissions');
    $this->clickLink(t('edit'), 0);
    $this->assertResponse(403, t('An authenticated user can not access any submission to a questionnaire created from a node.'));
    $this->assertText(t('You are not authorized to access this page.'), t('Questionnaire edit form not displayed on page.'));    
  }
  
  /**
   * Test whether an authenticated user can access their own submission to a 
   * questionnaire created from a node with a different node as its context.
   */
  public function testAuthUserAccessOwnSubmissionToQuestionnaireFromNodeDifferentContext() {
    $this->createQuestionnaireFromNodeDifferentContext();
    $this->drupalLogout();
    $authuser = $this->drupalCreateAuthUser();
    $this->drupalLogin($authuser);
    
    $this->drupalGet('node/4');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    $this->drupalGet('node/4/submissions');
    $this->clickLink(t('edit'), 0);
    $this->assertNoResponse(403, t('An authenticated user can access their own submission to a questionnaire created from a node with a different node as its context.'));
    $this->assertText(t('Questionnaire for Test Article'), t('Questionnaire edit form displayed on page.'));    
  }
  
  /**
   * Test whether an authenticated user can access another users submission to a 
   * questionnaire created from a node with a different node as its context.
   */
  public function testAuthUserAccessAnySubmissionToQuestionnaireFromNodeDifferentContext() {
    $this->createQuestionnaireFromNodeDifferentContext();
    
    $this->drupalGet('node/4');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    $this->drupalLogout();
    $authuser = $this->drupalCreateAuthUser();
    $this->drupalLogin($authuser);
    
    $this->drupalGet('node/4/submissions');
    $this->clickLink(t('edit'), 0);
    $this->assertResponse(403, t('An authenticated user can not access any submission to a questionnaire created from a node with a different node as its context.'));
    $this->assertText(t('You are not authorized to access this page.'), t('Questionnaire edit form not displayed on page.'));    
  }
  
  /**
   * Test whether an authenticated user can access their own submission to a 
   * questionnaire via the edit link in the context's Submissions table.
   */
  public function testAuthUserAccessOwnSubmissionViaLinkOnContext() {
    $this->createQuestionnaireFromNodeDifferentContext();
    $this->drupalLogout();
    $authuser = $this->drupalCreateAuthUser();
    $this->drupalLogin($authuser);
    
    $this->drupalGet('node/4');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    $this->drupalGet('node/3/submissions');
    $this->clickLink(t('edit'), 0);
    $this->assertNoResponse(403, t('An authenticated user can access their own submission to a questionnaire via the link in the context\'s Submissions table.'));
    $this->assertText(t('Questionnaire for Test Article'), t('Questionnaire edit form displayed on page.'));    
  }
  
  /**
   * Test whether an authenticated user can access another users submission to a 
   * questionnaire via the edit link in the context's Submissions table.
   */
  public function testAuthUserAccessAnySubmissionViaLinkOnContext() {
    $this->createQuestionnaireFromNodeDifferentContext();
    
    $this->drupalGet('node/4');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    $this->drupalLogout();
    $authuser = $this->drupalCreateAuthUser();
    $this->drupalLogin($authuser);
    
    $this->drupalGet('node/3/submissions');
    $this->clickLink(t('edit'), 0);
    $this->assertResponse(403, t('An authenticated user can not access any submission to a questionnaire via the link in the context\'s Submissions table.'));
    $this->assertText(t('You are not authorized to access this page.'), t('Questionnaire edit form not displayed on page.'));    
  }
}

/**
 * Tests the permissions of the questionnaire module.
 */
class QuestionnairePermissionsTestCase extends QuestionnaireWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => t('Questionnaire Permissions'),
      'description' => t('Tests the permissions of the questionnaire module.'),
      'group' => t('Questionnaire'));
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('questionnaire'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }

  /**
   * Test the view questions permission.
   */
  public function testViewQuestionPermission() {
    //Create a question
    $this->createSelectTypeQuestion();
    //Create a user with the permission and try to view the page.
    $this->drupalLogout();
    $user = $this->drupalCreateUser(array('view questions'));
    $this->drupalLogin($user);
    // Navigate to the Question page.
    $this->drupalGet("node/1");
    // The user should be able to view the page. 
    $this->assertResponse(200, t('A user with the view question permission can view the Question page.'));
    // Logout and try to navigate to the same page.
    $this->drupalLogout();
    $this->drupalGet("node/1");
    // The user should not be able to view the page. 
    $this->assertResponse(403, t('A user without the permission cannot view the Question page.'));
  }

  /**
   * Test the submit questions permission.
   */
  public function testSubmitQuestionPermission() {
    //Create a questionnaire.
    $this->createActiveQuestionnaire();
    //Create a user with the permission and login.
    $this->drupalLogout();
    $user = $this->drupalCreateUser(array('view questionnaire', 'submit questions'));
    $this->drupalLogin($user);
    // Navigate to the Questionnaire page.
    $this->drupalGet("node/8");
    $this->assertLink(t('Add Submission'), 0, t('A user with the submit questions permission can view the Add Submission link.'));
    // Logout and try to login as a user that does not have the permission
    $this->drupalLogout();
    $user = $this->drupalCreateUser(array('view questionnaire'));
    $this->drupalLogin($user);
    // Navigate to the Questionnaire page.
    $this->drupalGet("node/8");
    $this->assertNoLink(t('Add Submission'), 0, t('A user without the submit questions permission cannot view the Add Submission link.'));
  }
  
  /**
   * Test the create questions permission.
   */
  public function testCreateQuestionPermission() {
    //Create a user with the permission and login.
    $this->drupalLogout();
    $user = $this->drupalCreateUser(array('create questionnaire_question'));
    $this->drupalLogin($user);
    // Navigate to the Create Question page.
    $this->drupalGet("node/add/questionnaire_question");
    $this->assertResponse(200, t('A user with the create questionnaire_question permission can create a Question.'));
    // Logout and try to access the same page.
    $this->drupalLogout();
    // Navigate to the Create Question page.
    $this->drupalGet("node/add/questionnaire_question");
    $this->assertResponse(403, t('A user without the permission cannot view the create Question page.'));
  }

  /**
   * Test the edit any questions permission.
   */
  public function testEditAnyQuestionPermission() {
    //Create a question
    $this->createSelectTypeQuestion();
    //Create a user with the permission and login.
    $this->drupalLogout();
    $user = $this->drupalCreateUser(array('edit any questionnaire_question'));
    $this->drupalLogin($user);
    // Navigate to the Edit Question page.
    $this->drupalGet("node/1/edit");
    $this->assertResponse(200, t('A user with the edit any questionnaire question permission can edit a Question that they did not create.'));
    $this->drupalLogout();
    // Navigate to the Edit Question page.
    $this->drupalGet("node/1/edit");
    $this->assertResponse(403, t('A user without the permission cannot view the edit Question page.'));
  }

  /**
   * Test the delete any questions permission.
   */
  public function testDeleteAnyQuestionPermission() {
    //Create a question
    $this->createSelectTypeQuestion();
    $this->drupalLogout();
    // Navigate to the Delete Question page as user without the permission.
    $this->drupalGet("node/1/delete");
    $this->assertResponse(403, t('A user without the permission cannot access the delete Question page.'));
    //Create a user with the permission and login.
    $user = $this->drupalCreateUser(array('delete any questionnaire_question'));
    $this->drupalLogin($user);
    // Navigate to the Delete Question page.
    $this->drupalGet("node/1/delete");
    $this->assertResponse(200, t('A user with the delete any questionnaire question permission can view the delete Question page.'));
  }

  /**
   * Test the view questionnaire permission.
   */
  public function testViewQuestionnairePermission() {
    //Create a questionnaire.
    $this->createActiveQuestionnaire();
    //Create a user without the permission and try to view the page.
    $this->drupalLogout();
    $user = $this->drupalCreateUser(array('view questionnaire'));
    $this->drupalLogin($user);
    // Navigate to the Question page.
    $this->drupalGet("node/8");
    // The user should be able to view the page. 
    $this->assertResponse(200, t('A user with the view questionnaire permission can view the Questionnaire page.'));
    // Logout and try to navigate to the same page.
    $this->drupalLogout();
    $this->drupalGet("node/8");
    // The user should not be able to view the page. 
    $this->assertResponse(403, t('A user without the permission cannot view the Questionnaire page.'));
  }
  
  /**
   * Test administer questionnaire permission
   */
  public function testAdministerQuestionnairePermission() {
    //Create a questionnaire.
    $this->createActiveQuestionnaire();
    $this->drupalLogout();
    //Create a user without the permission and login.
    $user = $this->drupalCreateUser(array('create questionnaire_question'));
    $this->drupalLogin($user);
    // Navigate to the create, edit, and delete Questionnaire pages as a user 
    // without the permission.
    $this->drupalGet("node/add/questionnaire");
    $this->assertResponse(403, t('A user without the permission cannot view the Add Questionnaire page.'));
    $this->drupalGet("node/1/edit");
    $this->assertResponse(403, t('A user without the permission cannot view the Edit Questionnaire page.'));
    $this->drupalGet("node/1/delete");
    $this->assertResponse(403, t('A user without the permission cannot view the Delete Questionnaire page.'));
    //Create a user with the permission and login.
    $user = $this->drupalCreateUser(array('create questionnaire_question', 'administer questionnaire'));
    $this->drupalLogin($user);
    // Navigate to the create, edit, and delete Questionnaire pages as a user 
    // with the permission.
    $this->drupalGet("node/add/questionnaire");
    $this->assertResponse(200, t('A user with the permission can view the Add Questionnaire page.'));
    $this->drupalGet("node/8/edit");
    $this->assertResponse(200, t('A user with the permission can view the Edit Questionnaire page.'));
    $this->drupalGet("node/8/delete");
    $this->assertResponse(200, t('A user with the permission can view the Delete Questionnaire page.'));
  }
}

/**
 * Tests the different scenarios that can occur when creating a question.
 */
class QuestionTestCase extends QuestionnaireWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => t('Question'),
      'description' => t('Tests the different scenarios that can occur when creating a question.'),
      'group' => t('Questionnaire'));
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('questionnaire'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }

  /**
   * Test whether a user can create a select type question.
   */
  public function testCreateSelectTypeQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your gender?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'Male';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Female';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
  }

  /**
   * Test whether a user can create a checkboxes type question.
   */
  public function testCreateCheckboxesTypeQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave type of rock?';
    $question['questionnaire_question_type[und]'] = 'checkboxes';
    $question['questionnaire_question_options[und][0][value]'] = 'Classic Rock';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Hard Rock';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Punk Rock';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Soft Rock';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
  }

  /**
   * Test whether a user can create a radio button type question.
   */
  public function testCreateRadioTypeQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave colour?';
    $question['questionnaire_question_type[und]'] = 'radios';
    $question['questionnaire_question_options[und][0][value]'] = 'Black';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Blue';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Grey';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Purple';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][4][value]'] = 'Pink';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
  }

  /**
   * Test whether a user can create a number button type question.
   */
  public function testCreateNumberTypeQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave number?';
    $question['questionnaire_question_type[und]'] = 'number';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
  }
  
  /**
   * Test whether a user can create a message type question.
   */
  public function testCreateMessageTypeQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Thank you for filling this questionnaire.';
    $question['questionnaire_question_type[und]'] = 'message';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
  }
  
  /**
   * Test whether a user can create an open question.
   */
  public function testCreateOpenQuestion() {
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your first name?';
    $question['questionnaire_question_type[und]'] = 'open';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
  }
  
  /**
   * Test whether a user can create a taxonomy type question.
   */
  public function testCreateTaxonomyTypeQuestion() {
    //Create a vocabulary
    $this->createVocabulary();
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Who is your favourite artist?';
    $question['questionnaire_question_type[und]'] = 'taxonomy';
    $question['qq_options_vocabulary[und]'] = 'artists';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
  }
  
  /**
   * Test whether a user can edit a question.
   */
  public function testEditQuestion() {
    // Create a question.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Thank you for filling this questionnaire.';
    $question['questionnaire_question_type[und]'] = 'message';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
    
    // Navigate to the question page and assert that the Edit link shows.
    $this->drupalGet("node/1");
    $this->assertLink('Edit', 0, 'Edit link is present on page');
    
    // Click the link and edit the question.
    $this->clickLink('Edit');    
    $edit['title'] = 'How would you like to be thanked for filling this form?';
    $edit['questionnaire_question_type[und]'] = 'radios';
    $edit['questionnaire_question_options[und][0][value]'] = 'Gift Voucher';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $edit['questionnaire_question_options[und][1][value]'] = 'Actual Gift';
    $this->drupalPost(NULL, $edit, t('Save'));
    
    // Assert that the question has changed.
    $this->assertText(t('Question ' . $edit['title'] . ' has been updated.'), t('Question updated successfully.'));
    $this->assertRaw('<div class="field-label">The type of question.:&nbsp;</div><div class="field-items"><div class="field-item even">Radios</div></div>', t('Correct type reflected on question page.'));
    $this->assertRaw('<div class="field-label">Options:&nbsp;</div><div class="field-items"><div class="field-item even">Gift Voucher</div><div class="field-item odd">Actual Gift</div>', t('Correct options reflected on question page.'));
    
  }

  /**
   * Test whether a user can delete a question.
   */
  public function testDeleteQuestion() {
    $this->createSelectTypeQuestion();
    $this->drupalGet("node/1/delete");
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertText(t('Question What is your gender? has been deleted.'), t('Questionnaire deleted successfully.'));
  }
}


/**
 * Tests the different scenarios that can occur when creating a questionnaire.
 */
class QuestionnaireTestCase extends QuestionnaireWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
        'name' => t('Questionnaire'),
        'description' => t('Tests the different scenarios that can occur when creating a questionnaire.'),
        'group' => t('Questionnaire'));
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('questionnaire'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }

  /**
   * Test whether a user can create a questionnaire in preparation.
   */
  public function testCreateQuestionnaireInPreparation() {
    $this->createSelectTypeQuestion();
    $this->drupalGet("node/add/questionnaire");
    $questionnaire['title'] = 'Questionnaire In Preparation';
    $questionnaire['qstatus'] = 'In Preparation';
    $questionnaire['field_questionnaire_questions[und][0][field_questionnaire_qq][und][0][target_id]'] = 'What is your gender? (1)';
    $this->drupalPost(NULL, $questionnaire, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been created.'), t('Questionnaire created successfully.'));
  }

  /**
   * Test whether a user can create a questionnaire with Active Status.
   */
  public function testCreateActiveQuestionnaire() {
    $this->createSelectTypeQuestion();
    $this->createCheckboxesTypeQuestion();
    $this->createRadioTypeQuestion();
    $this->createNumberTypeQuestion();
    $this->createOpenQuestion();
    $this->createTaxonomyTypeQuestion();
    $this->createMessageTypeQuestion();
    $this->drupalGet("node/add/questionnaire");
    $questionnaire['title'] = 'Active Questionnaire';
    $questionnaire['qstatus'] = 'Active';
    $questionnaire['field_questionnaire_questions[und][0][field_questionnaire_qq][und][0][target_id]'] = 'What is your gender? (1)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][1][field_questionnaire_qq][und][0][target_id]'] = 'What is your fave type of rock? (2)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][2][field_questionnaire_qq][und][0][target_id]'] = 'What is your fave colour? (3)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][3][field_questionnaire_qq][und][0][target_id]'] = 'What is your fave number? (4)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][4][field_questionnaire_qq][und][0][target_id]'] = 'What is your first name? (5)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][5][field_questionnaire_qq][und][0][target_id]'] = 'Who is your favourite artist? (6)';
    $this->drupalPost(NULL, $questionnaire, t('Add another item'));
    $questionnaire['field_questionnaire_questions[und][6][field_questionnaire_qq][und][0][target_id]'] = 'Thank you for filling this questionnaire. (7)';
    $questionnaire['field_questionnaire_questions[und][6][field_questionnaire_qendpoint][und]'] = TRUE;
    $this->drupalPost(NULL, $questionnaire, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been created.'), t('Questionnaire created successfully.'));
  }

  /**
   * Test whether a user can create a questionnaire with Closed Status.
   */
  public function testCreateClosedQuestionnaire() {
    $this->createSelectTypeQuestion();
    $this->drupalGet("node/add/questionnaire");
    $questionnaire['title'] = 'Closed Questionnaire';
    $questionnaire['qstatus'] = 'Closed';
    $questionnaire['field_questionnaire_questions[und][0][field_questionnaire_qq][und][0][target_id]'] = 'What is your gender? (1)';
    $this->drupalPost(NULL, $questionnaire, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been created.'), t('Questionnaire created successfully.'));
  }
  
  /**
   * Test whether a questionnaire can be edited before a submission has been 
   * made
   */
  public function testEditQuestionnaireBeforeASubmission() {
    
    // Create a questionnaire..
    $this->createActiveQuestionnaire();
    
    $questionnaire['title'] = 'Active Questionnaire';
    
    // Create a question that will be added, edited and removed from the 
    // question.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave season?';
    $question['questionnaire_question_type[und]'] = 'radios';
    $question['questionnaire_question_options[und][0][value]'] = 'Spring';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Summer';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Autumn';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Winter';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
    
    //Go to the questionnaire page and click the Edit link.
    $this->drupalGet("node/8");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    
    // Add a question to the questionnaire.
    $this->drupalPost(NULL, NULL, t('Add another item'));
    $editedquestionnaire['field_questionnaire_questions[und][7][field_questionnaire_qq][und][0][target_id]'] = 'What is your fave season? (9)';
    $this->drupalPost(NULL, $editedquestionnaire, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));
    
    // Go to the question node page and click the Edit link
    $this->drupalGet("node/9");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    
    // Change the question so that it has two seasons instead of four.
    $season['questionnaire_question_options[und][0][value]'] = 'Dry Season';
    $season['questionnaire_question_options[und][1][value]'] = 'Rainy Season';
    $season['questionnaire_question_options[und][2][value]'] = '';
    $season['questionnaire_question_options[und][3][value]'] = '';
    $this->drupalPost(NULL, $season, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been updated.'), t('Question edited successfully.'));
    
    // Navigate back to the questionnaire and assert that changes to the 
    // question are reflected.
    $this->drupalGet("node/8");
    $this->clickLink('Add Submission');
    $this->assertRaw('<input type="radio" id="edit-9-dry-season" name="9" value="Dry Season" class="form-radio" />  <label class="option" for="edit-9-dry-season">Dry Season </label>', t('First change reflected on questionnaire'));
    $this->assertRaw('<input type="radio" id="edit-9-rainy-season" name="9" value="Rainy Season" class="form-radio" />  <label class="option" for="edit-9-rainy-season">Rainy Season </label>', t('Second change reflected on questionnaire'));
    
    // Go to the questionnaire page and click the Edit link.
    $this->drupalGet("node/8");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    
    // Remove the question from the questionnaire.
    $this->drupalPost(NULL, NULL, t('Remove'));
    $this->drupalPost(NULL, NULL, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));
    
    // Go to the questionnaire page and assert that the question is not part of 
    // the list of questions.
    $this->drupalGet("node/8");
    $this->assertNoText(t('What is your fave season?'), t('Question succesfully removed from questionnaire.'));
    
    // Click the edit link and test whether a user can change the questionnaire 
    // from one status to another.
    $this->clickLink(t('Edit'));
    
    // Active to Closed status
    $this->assertOptionSelected('edit-qstatus', t('Active'), t('Active status reflected on edit form'));
    $status['qstatus'] = 'Closed';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('Closed'), t('Questionnaire closed status reflected.'));
    
    // Closed to Active
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('Closed'), t('Closed status reflected on edit form'));
    $status['qstatus'] = 'Active';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('Active'), t('Questionnaire closed status reflected.'));
    
    // Active to In Preparation
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('Active'), t('Active status reflected on edit form'));
    $status['qstatus'] = 'In Preparation';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('In Preparation'), t('Questionnaire closed status reflected.'));
    
    // In Preparation to Active
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('In Preparation'), t('In Preparation status reflected on edit form'));
    $status['qstatus'] = 'Active';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('Active'), t('Questionnaire closed status reflected.'));   
    
    // Active to Closed status
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('Active'), t('Active status reflected on edit form'));
    $status['qstatus'] = 'Closed';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('Closed'), t('Questionnaire closed status reflected.'));
    
    // Closed to In Preparation
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('Closed'), t('Closed status reflected on edit form')); 
    $status['qstatus'] = 'In Preparation';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('In Preparation'), t('Questionnaire closed status reflected.'));
    
    // In Preparation to Closed
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('In Preparation'), t('In Preparation status reflected on edit form'));
    $status['qstatus'] = 'Closed';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('Closed'), t('Questionnaire closed status reflected.'));
    
    // Test whether question positions can be changed.
    $this->clickLink(t('Edit'), 4);
    $position1['field_questionnaire_qq[und][0][target_id]'] = 'What is your fave season? (7)';
    $position1['field_questionnaire_qendpoint[und]'] = FALSE;
    $this->drupalPost(NULL, $position1, t('Save'));
    $this->assertText(t('The changes have been saved.'), t('Changes saved successfully'));
    
  }
  
  /**
   * Test whether a questionnaire can be edited after a submission has been made
   */
  public function testEditQuestionnaireAfterASubmission() {
    
    // Create a questionnaire and add a submission.
    $this->addSubmission();
    
    $questionnaire['title'] = 'Active Questionnaire';
    
    // Create a question that will be added, edited and removed from the 
    // question.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave season?';
    $question['questionnaire_question_type[und]'] = 'radios';
    $question['questionnaire_question_options[und][0][value]'] = 'Spring';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Summer';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Autumn';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Winter';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText('Question ' . $question['title'] . ' has been created.', 'Question created successfully.');
    
    //Go to the questionnaire page and click the Edit link.
    $this->drupalGet("node/8");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    
    // Add a question to the questionnaire.
    $this->drupalPost(NULL, NULL, t('Add another item'));
    $editedquestionnaire['field_questionnaire_questions[und][7][field_questionnaire_qq][und][0][target_id]'] = 'What is your fave season? (9)';
    $this->drupalPost(NULL, $editedquestionnaire, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));
    
    // Add another submission to the form    
    $this->drupalGet("node/8");
    $this->assertLink(t('Add Submission'), 0, t('Add submission link is present on page'));
    $this->clickLink(t('Add Submission'));
    $answers['1'] = 'Female';
    $answers['2[Classic Rock]'] = TRUE;    
    $answers['2[Soft Rock]'] = TRUE;
    $answers['3'] = 'Purple';
    $answers['4'] = 18;
    $answers['5'] = 'Sophie';
    $answers['6'] = 'ACDC';
    $answers['9'] = 'Autumn';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission ad.ded successfully.'));
    
    // Go to the question node page and click the Edit link
    $this->drupalGet("node/9");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    
    // Change the question so that it has two seasons instead of four.
    $season['questionnaire_question_options[und][0][value]'] = 'Dry Season';
    $season['questionnaire_question_options[und][1][value]'] = 'Rainy Season';
    $season['questionnaire_question_options[und][2][value]'] = '';
    $season['questionnaire_question_options[und][3][value]'] = '';
    $this->drupalPost(NULL, $season, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been updated.'), t('Question edited successfully.'));
    
    // Navigate back to the questionnaire and assert that changes to the 
    // question are reflected.
    $this->drupalGet("node/8");
    $this->clickLink(t('Add Submission'));
    $this->assertRaw('<input type="radio" id="edit-9-dry-season" name="9" value="Dry Season" class="form-radio" />  <label class="option" for="edit-9-dry-season">Dry Season </label>', t('First change reflected on questionnaire'));
    $this->assertRaw('<input type="radio" id="edit-9-rainy-season" name="9" value="Rainy Season" class="form-radio" />  <label class="option" for="edit-9-rainy-season">Rainy Season </label>', t('Second change reflected on questionnaire'));
    
    // Go to the questionnaire page and click the Edit link.
    $this->drupalGet("node/8");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    
    // Remove the question from the questionnaire.
    $this->drupalPost(NULL, NULL, t('Remove'));
    $this->drupalPost(NULL, NULL, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));

    // Go to the questionnaire page and assert that the question is not part of 
    // the list of questions.
    $this->drupalGet("node/8");
    $this->assertNoText(t('What is your fave season?'), t('Question succesfully removed from questionnaire.'));
    
    // Click the edit link and test whether a user can change the questionnaire 
    // from one status to another.
    $this->clickLink(t('Edit'));
    
    // Active to Closed status
    $this->assertOptionSelected('edit-qstatus', t('Active'), t('Active status reflected on edit form'));
    $status['qstatus'] = 'Closed';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('Closed'), t('Questionnaire closed status reflected.'));
    
    // Closed to Active
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('Closed'), t('Closed status reflected on edit form'));
    $status['qstatus'] = 'Active';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('Active'), t('Questionnaire closed status reflected.'));
    
    // Active to In Preparation
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('Active'), t('Active status reflected on edit form'));
    $status['qstatus'] = 'In Preparation';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('In Preparation'), t('Questionnaire closed status reflected.'));
   
    // In Preparation to Active
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('In Preparation'), t('In Preparation status reflected on edit form'));
    $status['qstatus'] = 'Active';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('Active'), t('Questionnaire closed status reflected.'));   
    
    // Active to Closed status
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('Active'), t('Active status reflected on edit form'));
    $status['qstatus'] = 'Closed';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('Closed'), t('Questionnaire closed status reflected.'));
    
    // Closed to In Preparation
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('Closed'), t('Closed status reflected on edit form')); 
    $status['qstatus'] = 'In Preparation';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('In Preparation'), t('Questionnaire closed status reflected.'));
    
    // In Preparation to Closed
    $this->clickLink(t('Edit'));
    $this->assertOptionSelected('edit-qstatus', t('In Preparation'), t('In Preparation status reflected on edit form'));
    $status['qstatus'] = 'Closed';
    $this->drupalPost(NULL, $status, t('Save'));
    $this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been updated.'), t('Questionnaire edited successfully.'));    
    $this->assertText(t('Closed'), t('Questionnaire closed status reflected.'));
    
    // Test whether question positions can be changed.
    $this->clickLink(t('Edit'), 4);
    $position1['field_questionnaire_qq[und][0][target_id]'] = 'What is your fave season? (9)';
    $position1['field_questionnaire_qendpoint[und]'] = FALSE;
    $this->drupalPost(NULL, $position1, t('Save'));
    $this->assertText(t('The changes have been saved.'), t('Changes saved successfully'));
  }

  /**
	 * Test whether a user can delete a question from a questionnaire via the 
   * questionnaire page.
	 *
	public function testDeleteQuestionViaLinkOnQuestionnairePage() {
    // Create a questionnaire with one question.
		$this->createSelectTypeQuestion();
		$this->drupalGet("node/add/questionnaire");
		$questionnaire['title'] = 'Active Questionnaire';
		$questionnaire['qstatus'] = 'Active';
		$questionnaire['field_questionnaire_questions[und][0][field_questionnaire_qq][und][0][target_id]'] = 'What is your gender? (1)';
		$this->drupalPost(NULL, $questionnaire, t('Save'));
		$this->assertText(t('Questionnaire ' . $questionnaire['title'] . ' has been created.'), t('Questionnaire created successfully.'));
    
    // Navigate to the Questionnaires Questions and Submissions pages and assert
    // the correct messages are shown.
    $this->drupalGet('node/2/questions');
    $this->assertLink(t('What is your gender?'), 0, t('Link to question present.'));
    $this->drupalGet('node/2/submissions');
    $this->assertText(t('This Questionnaire does not have any Submissions yet.'), t('Correct message shown to user.'));
    
    // Navigate back to the Questionnaire page and delete the question.
    $this->drupalGet('node/2');
    $this->clickLink(t('Delete'), 0);
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertText(t('Questions 1 has been deleted.'), t('Question successfully deleted.'));    
    
    // Navigate back to the Questionnaires Questions and assert
    // the correct messages are shown.
    $this->drupalGet('node/2/questions');
    $this->assertNoLink(t('What is your gender?'), 0, t('Link to question not present.'));
    $this->assertText(t('This Questionnaire does not have any Questions yet.'), t('Correct message shown to user'));    
  }

  /**
   * Test whether a user can delete a questionnaire.
   */
  public function testDeleteQuestionnaire() {
    $this->createActiveQuestionnaire();
    $this->drupalGet("node/8/delete");
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertText(t('Questionnaire Active Questionnaire has been deleted.'), t('Questionnaire deleted successfully.'));
  }

  /**
   * Test whether a user can add a submission to an active questionnaire.
   */
  public function testAddSubmissionActiveQuestionnaire() {
    $this->createActiveQuestionnaire();
    $this->drupalGet("node/8");
    $this->assertLink(t('Add Submission'), 0, t('Add submission link is present on page'));
    $this->clickLink(t('Add Submission'));
    $answers['1'] = 'Female';
    $answers['2[Classic Rock]'] = TRUE;
    $answers['2[Soft Rock]'] = TRUE;
    $answers['3'] = 'Purple';
    $answers['4'] = 18;
    $answers['5'] = 'Sophie';
    $answers['6'] = 'ACDC';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission message displayed.'));
    $this->drupalGet('node/8/submissions');
    $this->assertNoText(t('This Questionnaire does not have any Submissions yet.'), t('Submission added successfully.'));
  }

  /**
   * Test whether a user can add a submission to a questionnaire in preparation.
   */
  public function testAddSubmissionQuestionnaireInPreparation() {
    $this->createQuestionnaireInPreparation();
    $this->drupalGet("node/2");
    $this->assertLink('Add Submission', 0, 'Add submission link is present on page');
    $this->clickLink('Add Submission');
    $answers['1'] = 'Female';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission edited successfully.'));
  }

  /**
   * Test whether a user can add a submission to a closed questionnaire.
   */
  public function testAddSubmissionClosedQuestionnaire() {
    $this->createClosedQuestionnaire();
    $this->drupalGet("node/2");
    $this->assertNoLink(t('Add Submission'), 0, t('Add submission link is present on page'));
  }

  /**
   * Test whether a user can edit a submission to an active questionnaire using 
   * Edit link on Questionnaire Submissions page.
   */
  public function testEditSubmissionViaLinkOnQuestionnaireSubmissionsPage() {
    $this->addSubmission();
    $this->drupalGet("node/8/submissions");
    $this->assertLink(t('edit'), 0, t('Edit submission link is present on page'));
    $this->clickLink(t('edit'));
    $this->assertOptionSelected('edit-1', t('Female'), t('Corect option selected for Question 1.'));
    $this->assertFieldChecked('edit-2-classic-rock', t('Question 2 first option selected'));
    $this->assertFieldChecked('edit-2-soft-rock', t('Question 2 second option selected'));
    $this->assertFieldByName('3', t('Purple'), t('Correct option selected for Question 3.'));
    $this->assertFieldByName('4', 18, t('Correct answer for Question 4 present.'));
    $this->assertFieldByName('5', 'Sophie', t('Correct answer for Question 5 present.'));
    $this->assertFieldByName('6', 'ACDC', t('Correct answer for Question 6 present.'));
    $answers['1'] = 'Female';
    $answers['2[Classic Rock]'] = FALSE;
    $answers['2[Soft Rock]'] = TRUE;
    $answers['3'] = 'Purple';
    $answers['4'] = 18;
    $answers['5'] = 'Sophie';
    $answers['6'] = 'ACDC';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Submission 1 edited successfully.'), t('Submission added successfully.'));
  }
  
  /**
   * Function that tests whether a user can view questions that are nolonger 
   * attached to the questionnaire when editing a submission that was made when 
   * those particular questions were still attached to the questionnaire.
   */
  public function testViewQuestionsSubmissions() {
    // Create a questionnaire and add a submission to it.
    $this->addSubmission();
    
    // Navigate to the questionnaires submissions page
    $this->drupalGet('node/8/submissions');
    
    // Check that original questions are displayed on the form
    $this->clickLink(t('edit'), 0);
    $this->assertText(t('What is your gender?'), t('Question 1 displayed on page.'));
    $this->assertText(t('What is your fave type of rock?'), t('Question 2 displayed on page.'));
    $this->assertText(t('What is your fave colour?'), t('Question 3 displayed on page.'));
    $this->assertText(t('What is your fave number?'), t('Question 4 displayed on page.'));
    $this->assertText(t('What is your first name?'), t('Question 5 displayed on page.'));
    $this->assertText(t('Who is your favourite artist?'), t('Question 6 displayed on page.'));
    $this->assertText(t('Thank you for filling this questionnaire.'), t('Question 7 displayed on page.'));
    
    // Create a question that will added to the questionnnaire.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave season?';
    $question['questionnaire_question_type[und]'] = 'radios';
    $question['questionnaire_question_options[und][0][value]'] = 'Spring';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Summer';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Autumn';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Winter';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
    
    // Go to the questionnaire page and click the Edit link.
    $this->drupalGet("node/8");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    
    // Replace the last question with the new question.
    $editedquestionnaire['field_questionnaire_questions[und][6][field_questionnaire_qq][und][0][target_id]'] = 'What is your fave season? (9)';
    $this->drupalPost(NULL, $editedquestionnaire, t('Save'));
    $this->assertText(t('Questionnaire Active Questionnaire has been updated.'), t('Questionnaire edited successfully.'));
    
    // Navigate back to the questionnaire and check that new question is 
    // displayed on the form
    $this->drupalGet('node/8/questions');
    $this->assertNoText(t('Thank you for filling this questionnaire.'), t('Question 7 nolonger displayed on page.'));
    $this->assertText(t('What is your fave season?'), t('New Question displayed on page.'));
    
    // Navigate back to the submissions edit page.
    $this->drupalGet('node/8/submissions');
    $this->clickLink(t('edit'), 0);
    // Check that original questions are still displayed on the form
    $this->assertText(t('What is your gender?'), t('Question 1 displayed on page.'));
    $this->assertText(t('What is your fave type of rock?'), t('Question 2 displayed on page.'));
    $this->assertText(t('What is your fave colour?'), t('Question 3 displayed on page.'));
    $this->assertText(t('What is your fave number?'), t('Question 4 displayed on page.'));
    $this->assertNoText(t('Thank you for filling this questionnaire.'), t('Question 7 nolonger displayed on page.'));
    $this->assertText(t('What is your fave season?'), t('New Question displayed on page.'));
  }

}


/**
 * Tests the different scenarios that can occur when creating a questionnaire 
 * from a node.
 */
class QuestionnaireFromNodeTestCase extends QuestionnaireWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => t('Questionnaire From Node'),
      'description' => t('Tests the different scenarios that can occur when creating a questionnaire from a nodetype e.g article.'),
      'group' => t('Questionnaire'));
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('questionnaire'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }

  /**
   * Function that tests whether a questionnaire can be created from a nodetype.
   * The nodetype used in this test will be an article.
   */
  public function testCreateQuestionnaireFromNode() {
    //Create a vocabulary
    $this->createVocabulary();
    
    // Add a term reference field for the vocabulary to the article nodetype.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $field['fields[_add_new_field][label]'] = 'artist';
    $field['fields[_add_new_field][field_name]'] = 'artist';
    $field['fields[_add_new_field][type]'] = 'taxonomy_term_reference';
    $field['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $field, t('Save'));
    $vocab['field[settings][allowed_values][0][vocabulary]'] = 'artists';
    $this->drupalPost(NULL, $vocab, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText(t('Updated field ' . $field['fields[_add_new_field][label]'] . ' field settings.'), t('Field settings have been saved'));
    $this->drupalPost(NULL, NULL, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $field['fields[_add_new_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Article content type saved successfully.'));
    
    // Edit the structure of the article content type.
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this 
    // content type.
    $options['questionnaire_question_isquestionnaire'] = TRUE;
    $options['questionnaire_question_copy_termfields_from_context'] = TRUE;
    $options['questionnaire_question_vocabulary'] = 'artists';
    $options['questionnaire_question_context'] = '';
    $this->drupalPost(NULL, $options, t('Save content type'));
    $this->assertText(t('The content type Article has been updated.'), t('Node succesfully updated'));
    
    
    // Add a term reference field for the vocabulary to the question.
    $this->drupalGet('admin/structure/types/manage/questionnaire_question/fields');
    $tag['fields[_add_existing_field][label]'] = 'artist';
    $tag['fields[_add_existing_field][field_name]'] = 'field_artist';
    $tag['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $tag, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $tag['fields[_add_existing_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Question content type saved successfully.'));
    
    
    //Add Two questions with different artists attached to them.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Hard rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the instruments.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));

    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Indie rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the vocals.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
    
    // Create an article and tag it with an artist.
    $this->drupalGet('node/add/article');
    $article['title'] = 'Test Article';
    $article['body[und][0][value]'] = 'This article should have a questionnaire with the question about hard rock.';
    $article['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $article, t('Save'));
    
    // Assert that the question has really been added to the questionnaire.
    $this->drupalGet('node/3/questions');
    $this->assertText(t('Why do you like Hard rock?'), t('Question successfully added to questionnaire created from a node'));
    $this->assertNoText(t('Why do you like Indie rock?'), t('Node has the correct question selected.'));

  }

  /**
   * Function that tests whether a user can add a submission to a questionnaire 
   * created from a nodetype.
   * The nodetype used in this test will be an article.
   */
  public function testAddSubmissionToQuestionnaireFromNode() {
    // Create a questionnaire from an article
    $this->createQuestionnaireFromNode();

    // Try to add a submission to this questionnaire
    $this->drupalGet('node/3');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    $this->drupalGet('node/3/submissions');
  }

  /**
   * Function that tests whether a user can edit a submission to a questionnaire
   * created from a nodetype.
   * The nodetype used in this test will be an article.
   */
  public function testEditSubmissionToQuestionnaireFromNode() {
    // Create a questionnaire from an article
    $this->createQuestionnaireFromNode();

    // Try to add a submission to this questionnaire
    $this->drupalGet('node/3');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    $this->drupalGet('node/3/submissions');
  
    // Try to edit the submission
    $this->drupalGet('node/3/submissions');
    $this->clickLink('edit', 0);
    $submission['1'] = 'I just do.';
    $this->drupalPost(NULL, $submission, t('Submit'));
    $this->assertText(t('Submission 1 edited successfully.'), t('Submission added successfully.'));
  }
  
  /**
   * Test whether a questionnaire created from a nodetype can be edited before a
   * submission is made.
   */
  public function testEditQuestionnaireFromNodeBeforeASubmission() {
    $this->createQuestionnaireFromNode();
    
    // Add another question by tagging another question with the appropriate 
    // taxonomy term
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave season?';
    $question['questionnaire_question_type[und]'] = 'radios';
    $question['questionnaire_question_options[und][0][value]'] = 'Spring';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Summer';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Autumn';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Winter';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
    
    // Assert that the question is added to the questionnaire
    $this->drupalGet('node/3/questions');
    $this->assertText(t('What is your fave season?'), t('Question successfully added to questionnaire created from a node.'));
    
    // Go to the question node page and click the Edit link
    $this->drupalGet("node/4");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    
    // Change the question so that it has two seasons instead of four.
    $season['questionnaire_question_options[und][0][value]'] = 'Dry Season';
    $season['questionnaire_question_options[und][1][value]'] = 'Rainy Season';
    $season['questionnaire_question_options[und][2][value]'] = '';
    $season['questionnaire_question_options[und][3][value]'] = '';
    $this->drupalPost(NULL, $season, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been updated.'), t('Question edited successfully.'));
    
    // Navigate back to the questionnaire and assert that changes to the 
    // question are reflected.
    $this->drupalGet("node/3");
    $this->clickLink(t('Add Submission'));
    $this->assertRaw('<input type="radio" id="edit-4-dry-season" name="4" value="Dry Season" class="form-radio" />  <label class="option" for="edit-4-dry-season">Dry Season </label>', t('First change reflected on questionnaire'));
    $this->assertRaw('<input type="radio" id="edit-4-rainy-season" name="4" value="Rainy Season" class="form-radio" />  <label class="option" for="edit-4-rainy-season">Rainy Season </label>', t('Second change reflected on questionnaire'));
    
    // Change the question taxonomy term and assert that the question is not 
    // attached to the questionnaire anymore.
    $this->drupalGet("node/4");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    $vocab['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $vocab, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been updated.'), t('Question edited successfully.'));
    
    // Navigate back to the questionnaire and assert that changes to the 
    // question are reflected.
    $this->drupalGet("node/3");
    $this->clickLink(t('Add Submission'));
    $this->assertNoRaw('<input type="radio" id="edit-4-dry-season" name="4" value="Dry Season" class="form-radio" />  <label class="option" for="edit-4-dry-season">Dry Season </label>', t('First change reflected on questionnaire'));
    $this->assertNoRaw('<input type="radio" id="edit-4-rainy-season" name="4" value="Rainy Season" class="form-radio" />  <label class="option" for="edit-4-rainy-season">Rainy Season </label>', t('Second change reflected on questionnaire'));
    
    // Change the taxonomy term of the questionnaire    
    $this->drupalGet("node/3");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    $article['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $article, t('Save'));
    
    // Navigate back to questionnaire and assert that changes to the question 
    // are reflected.
    $this->drupalGet('node/3/questions');
    $this->assertText(t('What is your fave season?'), t('Questions successfully changed on questionnaire created from a node.'));    
    
  }
  
  /**
   * Test whether a questionnaire created from a node can be edited after a 
   * submission is made.
   */
  public function testEditQuestionnaireFromNodeAfterASubmission() {
    $this->createQuestionnaireFromNode();
    
    // Add a submission to the node   
    $this->drupalGet("node/3");
    $this->assertLink(t('Add Submission'), 0, t('Add submission link is present on page'));
    $this->clickLink(t('Add Submission'));
    $answers['1'] = 'I like all the instruments.';
    $answers['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    // Add another question by tagging another question with the appropriate 
    // taxonomy term
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave season?';
    $question['questionnaire_question_type[und]'] = 'radios';
    $question['questionnaire_question_options[und][0][value]'] = 'Spring';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Summer';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Autumn';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Winter';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
    
    // Assert that the question is added to the questionnaire
    $this->drupalGet('node/3/questions');
    $this->assertText(t('What is your fave season?'), t('Question successfully added to questionnaire created from a node.'));
    
    
    // Add another submission to the node, this time including the new question  
    $this->drupalGet("node/3");
    $this->assertLink(t('Add Submission'), 0, t('Add submission link is present on page'));
    $this->clickLink(t('Add Submission'));
    $answers['1'] = 'I like all the instruments.';
    $answers['2'] = 'Yes, I do.';
    $answers['4'] = 'Autumn';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    // Go to the question node page and click the Edit link
    $this->drupalGet("node/4");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    
    // Change the question so that it has two seasons instead of four.
    $season['questionnaire_question_options[und][0][value]'] = 'Dry Season';
    $season['questionnaire_question_options[und][1][value]'] = 'Rainy Season';
    $season['questionnaire_question_options[und][2][value]'] = '';
    $season['questionnaire_question_options[und][3][value]'] = '';
    $this->drupalPost(NULL, $season, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been updated.'), t('Question edited successfully.'));
    
    // Navigate back to the questionnaire and assert that changes to the question are reflected.
    $this->drupalGet("node/3");
    $this->clickLink(t('Add Submission'));
    $this->assertRaw('<input type="radio" id="edit-4-dry-season" name="4" value="Dry Season" class="form-radio" />  <label class="option" for="edit-4-dry-season">Dry Season </label>', t('First change reflected on questionnaire'));
    $this->assertRaw('<input type="radio" id="edit-4-rainy-season" name="4" value="Rainy Season" class="form-radio" />  <label class="option" for="edit-4-rainy-season">Rainy Season </label>', t('Second change reflected on questionnaire'));
    
    // Change the question taxonomy term and assert that the question is not 
    // attached to the questionnaire anymore.
    $this->drupalGet("node/4");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    $vocab['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $vocab, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been updated.'), t('Question edited successfully.'));
    
    // Navigate back to the questionnaire and assert that changes to the 
    // question are reflected.
    $this->drupalGet("node/3");
    $this->clickLink(t('Add Submission'));
    $this->assertNoRaw('<input type="radio" id="edit-4-dry-season" name="4" value="Dry Season" class="form-radio" />  <label class="option" for="edit-4-dry-season">Dry Season </label>', t('First change reflected on questionnaire'));
    $this->assertNoRaw('<input type="radio" id="edit-4-rainy-season" name="4" value="Rainy Season" class="form-radio" />  <label class="option" for="edit-4-rainy-season">Rainy Season </label>', t('Second change reflected on questionnaire'));
  
    // Change the taxonomy term of the questionnaire    
    $this->drupalGet("node/3");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink('Edit');
    $article['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $article, t('Save'));
    
    // Navigate back to questionnaire and assert that changes to the question 
    // are reflected.
    $this->drupalGet('node/3/questions');
    $this->assertText(t('What is your fave season?'), t('Questions successfully changed on questionnaire created from a node.'));    
    
  }

  /**
   * Test whether a user can delete a questionnaire node.
   */
  public function testDeleteQuestionnaireNode() {
    $this->createQuestionnaireFromNode();
    $this->drupalGet("node/3/delete");
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertText(t('Article Test Article has been deleted.'), t('Questionnaire Node deleted successfully.'));
  }

  /**
   * Test whether a user can delete a questionnaire node by unchecking the 
   * questionnaire checkbox.
   */
  public function testDisableQuestionnaireNodeViaNodeStructurePage() {
    $this->createQuestionnaireFromNode();
  
    // Add a submission to the node   
    $this->drupalGet("node/3");
    $this->assertLink(t('Add Submission'), 0, t('Add submission link is present on page'));
    $this->clickLink(t('Add Submission'));
    $answers['1'] = 'I like all the instruments.';
    $answers['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    // Edit the structure of the article content type
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this 
    // content type.
    $editedoptions['questionnaire_question_isquestionnaire'] = FALSE;
    $editedoptions['questionnaire_question_copy_termfields_from_context'] = FALSE;
    $this->drupalPost(NULL, $editedoptions, t('Save content type'));
    $this->assertText(t('The content type Article has been updated.'), t('Node succesfully updated'));
    
    $this->drupalGet("node/3");
    // Navigate back to the Node page and assert that the Add Submission linnk 
    // is gone
    $this->assertNoLink(t('Add Submission'), 0, t('Add Submission link successfully removed.'));
    
    // Navigate to the Questions tab and assert that the new status is indicated
    $this->clickLink(t('Questions'));
    $this->assertText(t('This Questionnaire is disabled.'), t('New status of questionnaire reflected on the page.'));
  }
  
  /**
   * Function that tests whether a user can view questions that are nolonger 
   * attached to the questionnaire when editing a submission that was made when 
   * those particular questions were still attached to the questionnaire.
   */
  public function testViewQuestionsSubmissions() {
    // Create a questionnaire from an article
    $this->createQuestionnaireFromNode();
    
    // Add a submission to this questionnaire
    $this->drupalGet('node/3');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    $this->drupalGet('node/3/submissions');
    
    // Check that original questions are displayed on the form
    $this->clickLink(t('edit'), 0);
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed on page.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed on page.'));
    
    // Add a question that will be attached to the questionnaire after the 
    // context taxonomy term is changed.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Indie rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the vocals.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
    
    // Change the taxonomy term of the article, thereby changing the 
    // questions attached to the questionnaire.
    $this->drupalGet('node/3/edit');
    $song['title'] = 'Long way to the top';
    $song['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $song, t('Save'));
    
    // Navigate back to the questionnaire and check that new question is 
    // displayed on the form
    $this->drupalGet('node/3/questions');
    $this->assertNoText(t('Why do you like Hard rock?'), t('Question 1 nolonger displayed on page.'));
    $this->assertNoText(t('Do you consider ACDC metal?'), t('Question 2 nolonger displayed on page.'));
    $this->assertText(t('Why do you like Indie rock?'), t('New Question displayed on page.'));
    
    // Navigate back to the submissions edit page.
    $this->drupalGet('node/3/submissions');
    $this->clickLink(t('edit'), 0);
    // Check that original questions are still displayed on the form
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed on page.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed on page.'));
    $this->assertText(t('Why do you like Indie rock?'), t('New Question displayed on page.'));
  }
}

/**
 * Tests the different scenarios that can occur when creating a questionnaire 
 * from a nodetype when the questionnaire is not equal to the context.
 */
class QuestionnaireFromNodeDifferentContextTestCase extends QuestionnaireWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => t('Questionnaire From Node(Questionnaire Not Equal To Context)'),
      'description' => t('Tests the different scenarios that can occur when creating a questionnaire from a nodetype when the questionnaire is not the context.'),
      'group' => t('Questionnaire'));
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('questionnaire'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }

  /**
   * Function that tests whether a questionnaire can be created from a node.
   * The nodetype used as the questionnaire in this test will be an article.
   * The context will be another nodetype called song.
   */
  public function testCreateQuestionnaireFromNode() {
    // Create a vocabulary.
    $this->createVocabulary();
    
    // Create the song entity
    $this->createSong();
    
    // Add an entity reference field for the context to the article nodetype.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $field['fields[_add_new_field][label]'] = 'song';
    $field['fields[_add_new_field][field_name]'] = 'song';
    $field['fields[_add_new_field][type]'] = 'entityreference';
    $field['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $field, t('Save'));
    $bundle['field[settings][handler_settings][target_bundles][song]'] = 'TRUE';
    $this->drupalPost(NULL, $bundle, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText(t('Updated field ' . $field['fields[_add_new_field][label]'] . ' field settings.'), t('Field settings have been saved'));
    $this->drupalPost(NULL, NULL, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $field['fields[_add_new_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Article content type saved successfully.'));
    
    // Edit the structure of the article content type
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this 
    // content type.
    $options['questionnaire_question_isquestionnaire'] = TRUE;
    $options['questionnaire_question_copy_termfields_from_context'] = TRUE;
    $options['questionnaire_question_vocabulary'] = 'artists';
    $options['questionnaire_question_context'] = 'field_song';
    $this->drupalPost(NULL, $options, t('Save content type'));
    $this->assertText(t('The content type Article has been updated.'), t('Node succesfully updated'));
    
    
    // Add a term reference field for the vocabulary(artists) to the question.
    $this->drupalGet('admin/structure/types/manage/questionnaire_question/fields');
    $tag['fields[_add_existing_field][label]'] = 'artist';
    $tag['fields[_add_existing_field][field_name]'] = 'field_artist';
    $tag['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $tag, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $tag['fields[_add_existing_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Question content type saved successfully.'));
    
    
    //Add Two questions with different artists attached to them.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Hard rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the instruments.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));

    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Indie rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the vocals.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
    
    //Create a Song
    $this->drupalGet('node/add/song');
    $song['title'] = 'Long way to the top';
    $song['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $song, t('Save'));
    $this->assertText(t('Song ' . $song['title'] . ' has been created.'), t('Song created successfully.'));
    
    // Create an article and tag it with the song.
    $this->drupalGet('node/add/article');
    $article['title'] = 'Test Article';
    $article['body[und][0][value]'] = 'This article should have a questionnaire with the question about hard rock.';
    $article['field_song[und]'] = '3';
    $this->drupalPost(NULL, $article, t('Save'));
    
    // Assert that the question has really been added to the questionnaire.
    // attached to this content
    $this->drupalGet('node/4/questions');
    $this->assertText(t('Why do you like Hard rock?'), t('Question successfully added to questionnaire created from a node'));
    $this->assertNoText(t('Why do you like Indie rock?'), t('Node has the correct question selected.'));

  }

  /**
   * Function that tests whether a user can add a submission to a questionnaire 
   * created from a nodetype.
   * The nodetype used as the questionnaire in this test will be an article.
   * The context will be another nodetype called song.
   */
  public function testAddSubmissionToQuestionnaireFromNode() {
    // Create a questionnaire from an article
    $this->createQuestionnaireFromNodeDifferentContext();
    
    // Try to add a submission to this questionnaire
    $this->drupalGet('node/4');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
//  	$submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    $this->drupalGet('node/4/submissions');
  }
  
  /**
   * Function that tests whether a user can edit a submission to a questionnaire
   *  created from a nodetype.
   * The nodetype used as the questionnaire in this test will be an article.
   * The context will be another nodetype called song.
   */
  public function testEditSubmissionToQuestionnaireFromNode() {
    // Create a questionnaire from an article
    $this->createQuestionnaireFromNodeDifferentContext();

    // Try to add a submission to this questionnaire
    $this->drupalGet('node/4');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    $this->drupalGet('node/3/submissions');

    // Try to edit the submission
    $this->drupalGet('node/4/submissions');
    $this->clickLink(t('edit'), 0);
    $submission['1'] = 'I just do.';
    $this->drupalPost(NULL, $submission, t('Submit'));
    $this->assertText(t('Submission 1 edited successfully.'), t('Submission added successfully.'));
  }

  /**
   * Test whether a questionnaire created from a node can be edited before a 
   * submission is made.
   */
  public function testEditQuestionnaireFromNodeBeforeASubmission() {
    $this->createQuestionnaireFromNodeDifferentContext();

    // Add another question by tagging another question with the appropriate 
    // taxonomy term
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave season?';
    $question['questionnaire_question_type[und]'] = 'radios';
    $question['questionnaire_question_options[und][0][value]'] = 'Spring';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Summer';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Autumn';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Winter';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
 
    // Assert that the question is added to the questionnaire.
    $this->drupalGet('node/4/questions');
    $this->assertText(t('What is your fave season?'), t('Question successfully added to questionnaire created from a node.'));

    // Go to the question node page and click the Edit link.
    $this->drupalGet("node/5");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));

    // Change the question so that it has two seasons instead of four.
    $season['questionnaire_question_options[und][0][value]'] = 'Dry Season';
    $season['questionnaire_question_options[und][1][value]'] = 'Rainy Season';
    $season['questionnaire_question_options[und][2][value]'] = '';
    $season['questionnaire_question_options[und][3][value]'] = '';
    $this->drupalPost(NULL, $season, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been updated.'), t('Question edited successfully.'));
 
    // Navigate back to the questionnaire and assert that changes to the 
    // question are reflected.
    $this->drupalGet("node/4");
    $this->clickLink(t('Add Submission'));
    $this->assertRaw('<input type="radio" id="edit-5-dry-season" name="5" value="Dry Season" class="form-radio" />  <label class="option" for="edit-5-dry-season">Dry Season </label>', t('First change reflected on questionnaire'));
    $this->assertRaw('<input type="radio" id="edit-5-rainy-season" name="5" value="Rainy Season" class="form-radio" />  <label class="option" for="edit-5-rainy-season">Rainy Season </label>', t('Second change reflected on questionnaire'));

    // Change the question taxonomy term and assert that the question is not 
    // attached to the questionnaire anymore.
    $this->drupalGet("node/5");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    $vocab['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $vocab, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been updated.'), t('Question edited successfully.'));

    // Navigate back to the questionnaire and assert that changes to the 
    // question are reflected.
    $this->drupalGet("node/4");
    $this->clickLink(t('Add Submission'));
    $this->assertNoRaw('<input type="radio" id="edit-5-dry-season" name="5" value="Dry Season" class="form-radio" />  <label class="option" for="edit-5-dry-season">Dry Season </label>', t('First change reflected on questionnaire'));
    $this->assertNoRaw('<input type="radio" id="edit-5-rainy-season" name="5" value="Rainy Season" class="form-radio" />  <label class="option" for="edit-5-rainy-season">Rainy Season </label>', t('Second change reflected on questionnaire'));
    
    //Create another Song
    $this->drupalGet('node/add/song');
    $song['title'] = 'Once I was an Eagle';
    $song['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $song, t('Save'));
    $this->assertText(t('Song ' . $song['title'] . ' has been created.'), t('Song created successfully.'));

    // Change the context of the questionnaire    
    $this->drupalGet("node/4");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    $article['field_song[und]'] = '6';
    $this->drupalPost(NULL, $article, t('Save'));

    // Navigate back to questionnaire and assert that changes to the question 
    // are reflected.
    $this->drupalGet('node/4/questions');
    $this->assertText(t('What is your fave season?'), t('Questions successfully changed on questionnaire created from a node.'));    
  }
 
  /**
   * Test whether a questionnaire created from a node can be edited after 
   * a submission is made.
   */
  public function testEditQuestionnaireFromNodeAfterASubmission() {
    $this->createQuestionnaireFromNodeDifferentContext();

    // Add a submission to the node.
    $this->drupalGet("node/4");
    $this->assertLink(t('Add Submission'), 0, t('Add submission link is present on page'));
    $this->clickLink(t('Add Submission'));
    $answers['1'] = 'I like all the instruments.';
    $answers['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    // Add another question by tagging another question with the appropriate 
    // taxonomy term
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'What is your fave season?';
    $question['questionnaire_question_type[und]'] = 'radios';
    $question['questionnaire_question_options[und][0][value]'] = 'Spring';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'Summer';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][2][value]'] = 'Autumn';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][3][value]'] = 'Winter';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));

    // Assert that the question is added to the questionnaire
    $this->drupalGet('node/4/questions');
    $this->assertText(t('What is your fave season?'), t('Question successfully added to questionnaire created from a node.'));
    
    // Add another submission to the node, this time including the new question  
    $this->drupalGet("node/4");
    $this->assertLink(t('Add Submission'), 0, t('Add submission link is present on page'));
    $this->clickLink(t('Add Submission'));
    $answers['1'] = 'I like all the instruments.';
    $answers['2'] = 'Yes, I do.';
    $answers['5'] = 'Autumn';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));

    // Go tot the question node page and click the Edit link
    $this->drupalGet("node/5");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));

    // Change the question so that it has two seasons instead of four.
    $season['questionnaire_question_options[und][0][value]'] = 'Dry Season';
    $season['questionnaire_question_options[und][1][value]'] = 'Rainy Season';
    $season['questionnaire_question_options[und][2][value]'] = '';
    $season['questionnaire_question_options[und][3][value]'] = '';
    $this->drupalPost(NULL, $season, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been updated.'), t('Question edited successfully.'));

    // Navigate back to the questionnaire and assert that changes to the 
    // question are reflected.
    $this->drupalGet("node/4");
    $this->clickLink('Add Submission');
    $this->assertRaw('<input type="radio" id="edit-5-dry-season" name="5" value="Dry Season" class="form-radio" />  <label class="option" for="edit-5-dry-season">Dry Season </label>', t('First change reflected on questionnaire'));
    $this->assertRaw('<input type="radio" id="edit-5-rainy-season" name="5" value="Rainy Season" class="form-radio" />  <label class="option" for="edit-5-rainy-season">Rainy Season </label>', t('Second change reflected on questionnaire'));

    // Change the question taxonomy term and assert that the question
    // is not attached to the questionnaire anymore.
    $this->drupalGet("node/5");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    $vocab['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $vocab, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been updated.'), t('Question edited successfully.'));

    // Navigate back to the questionnaire and assert that changes to the 
    // question are reflected.
    $this->drupalGet("node/4");
    $this->clickLink('Add Submission');
    $this->assertNoRaw('<input type="radio" id="edit-5-dry-season" name="5" value="Dry Season" class="form-radio" />  <label class="option" for="edit-5-dry-season">Dry Season </label>', t('First change reflected on questionnaire'));
    $this->assertNoRaw('<input type="radio" id="edit-5-rainy-season" name="5" value="Rainy Season" class="form-radio" />  <label class="option" for="edit-5-rainy-season">Rainy Season </label>', t('Second change reflected on questionnaire'));
    
    //Create another Song
    $this->drupalGet('node/add/song');
    $song['title'] = 'Once I was an Eagle';
    $song['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $song, t('Save'));
    $this->assertText(t('Song ' . $song['title'] . ' has been created.'), t('Song created successfully.'));

    // Change the context of the questionnaire    
    $this->drupalGet("node/4");
    $this->assertLink(t('Edit'), 0, t('Edit link is present on page'));
    $this->clickLink(t('Edit'));
    $article['field_song[und]'] = '6';
    $this->drupalPost(NULL, $article, t('Save'));
    
    // Navigate back to questionnaire and assert that changes to the question
    //  are reflected.
    $this->drupalGet('node/4/questions');
    $this->assertText(t('What is your fave season?'), t('Questions successfully changed on questionnaire created from a node.'));    
    
  }
  
  /**
   * Test whether a user can delete a questionnaire node.
   */
  public function testDeleteQuestionnaireNode() {
    $this->createQuestionnaireFromNodeDifferentContext();
    $this->drupalGet("node/4/delete");
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertText(t('Article Test Article has been deleted.'), t('Questionnaire Node deleted successfully.'));
  }

  /**
   * Test whether a user can delete a questionnaire node by unchecking the 
   * questionnaire checkbox.
   */
  public function testDisableQuestionnaireNodeViaNodeStructurePage() {
    $this->createQuestionnaireFromNodeDifferentContext();
    
    // Add a submission to the node   
    $this->drupalGet("node/4");
    $this->assertLink(t('Add Submission'), 0, t('Add submission link is present on page'));
    $this->clickLink(t('Add Submission'));
    $answers['1'] = 'I like all the instruments.';
    $answers['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $answers, t('Submit'));
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    // Edit the structure of the article content type
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this content type.
    $editedoptions['questionnaire_question_isquestionnaire'] = FALSE;
    $editedoptions['questionnaire_question_copy_termfields_from_context'] = FALSE;
    $this->drupalPost(NULL, $editedoptions, t('Save content type'));
    $this->assertText(t('The content type Article has been updated.'), t('Node succesfully updated'));
    
    $this->drupalGet("node/4");
    // Navigate back to the Node page and assert that the Add Submission link 
    // is gone
    $this->assertNoRaw('<li><a href="/TestSiteThree/node/4/addsubmission">Add Submission</a></li>', t('Add Submission link successfully removed.'));
    
    // Navigate to the Questions tab and assert that the new status is indicated.
    $this->clickLink(t('Questions'));
    $this->assertText(t('This Questionnaire is disabled.'), t('New status of questionnaire reflected on the page.'));
  }

  /**
   * Function that tests whether a questionnaire's questions change after the 
   * context is changed.
   * The node used in this test will be an article.
   * The two contexts will be other nodetypes called song and album.
   */
  public function testEditContextOfAQuestionnaireFromNode() {
    // Create a vocabulary.
    $this->createVocabulary();
    
    // Create the song entity
    $this->createSong();
    
    // Add an entity reference field for the song entity to the article nodetype.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $field['fields[_add_new_field][label]'] = 'song';
    $field['fields[_add_new_field][field_name]'] = 'song';
    $field['fields[_add_new_field][type]'] = 'entityreference';
    $field['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $field, t('Save'));
    $bundle['field[settings][handler_settings][target_bundles][song]'] = 'TRUE';
    $this->drupalPost(NULL, $bundle, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText(t('Updated field ' . $field['fields[_add_new_field][label]'] . ' field settings.'), t('Field settings have been saved'));
    $this->drupalPost(NULL, NULL, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $field['fields[_add_new_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Article content type saved successfully.'));
    
    // Edit the structure of the article content type
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this 
    // content type.
    $options['questionnaire_question_isquestionnaire'] = TRUE;
    $options['questionnaire_question_copy_termfields_from_context'] = TRUE;
    $options['questionnaire_question_vocabulary'] = 'artists';
    $options['questionnaire_question_context'] = 'field_song';
    $this->drupalPost(NULL, $options, t('Save content type'));
    $this->assertText(t('The content type Article has been updated.'), t('Node succesfully updated'));
    
    
    // Add a term reference field for the vocabulary to the question.
    $this->drupalGet('admin/structure/types/manage/questionnaire_question/fields');
    $tag['fields[_add_existing_field][label]'] = 'artist';
    $tag['fields[_add_existing_field][field_name]'] = 'field_artist';
    $tag['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $tag, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $tag['fields[_add_existing_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Question content type saved successfully.'));
    
    
    //Add Two questions with different artists attached to them.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Hard rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the instruments.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));

    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Indie rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the vocals.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
    
    //Create a Song
    $this->drupalGet('node/add/song');
    $song['title'] = 'Long way to the top';
    $song['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $song, t('Save'));
    $this->assertText(t('Song ' . $song['title'] . ' has been created.'), t('Song created successfully.'));
    
    // Create an article and tag it with a song.
    $this->drupalGet('node/add/article');
    $article['title'] = 'Test Article';
    $article['body[und][0][value]'] = 'This article should have a questionnaire with the question about hard rock.';
    $article['field_song[und]'] = '3';
    $this->drupalPost(NULL, $article, t('Save'));
    
    // Assert that the question has really been added to the questionnaire 
    // attached to this content
    $this->drupalGet('node/4/questions');
    $this->assertText(t('Why do you like Hard rock?'), t('Question successfully added to questionnaire created from a node.'));
    $this->assertText(t('Why do you like Indie rock?'), t('Question successfully added to questionnaire created from a node.'));
    
    // Create another vocabulary
    $vocabulary = new stdClass();
    $vocabulary->name = 'Genres';
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = 'genres';
    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;

    // Create 2 new terms programmatically.
    $newterm = new stdClass();
    $newterm->name = 'Hard Rock';
    $newterm->vid = $vid;
    $newterm->parent = 0;
    taxonomy_term_save($newterm);

    $newterm1 = new stdClass();
    $newterm1->name = 'Soft Rock';
    $newterm1->vid = $vid;
    $newterm1->parent = 0;
    taxonomy_term_save($newterm1);
    
    // Create the album entity
    $this->drupalGet('admin/structure/types/add');
    $type1['name'] = 'Album';
    $type1['type'] = 'album';
    $type1['description'] = '';
    $this->drupalPost(NULL, $type1, t('Save and add fields'));
    $field1['fields[_add_new_field][label]'] = 'genre';
    $field1['fields[_add_new_field][field_name]'] = 'genre';
    $field1['fields[_add_new_field][type]'] = 'taxonomy_term_reference';
    $field1['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $field1, t('Save'));
    $vocab1['field[settings][allowed_values][0][vocabulary]'] = 'genres';
    $this->drupalPost(NULL, $vocab1, t('Save field settings'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    
    // Add a entity reference field for the album entity to the nodetype.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $field2['fields[_add_new_field][label]'] = 'album';
    $field2['fields[_add_new_field][field_name]'] = 'album';
    $field2['fields[_add_new_field][type]'] = 'entityreference';
    $field2['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $field2, t('Save'));
    $bundle2['field[settings][handler_settings][target_bundles][album]'] = 'TRUE';
    $this->drupalPost(NULL, $bundle2, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText(t('Updated field ' . $field2['fields[_add_new_field][label]'] . ' field settings.'), t('Field settings have been saved'));
    $this->drupalPost(NULL, NULL, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $field2['fields[_add_new_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Article content type saved successfully.'));
    
    // Edit the structure of the article content type
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this 
    // content type.
    $options['questionnaire_question_isquestionnaire'] = TRUE;
    $options['questionnaire_question_copy_termfields_from_context'] = TRUE;
    $options['questionnaire_question_vocabulary'] = 'genres';
    $options['questionnaire_question_context'] = 'field_album';
    $this->drupalPost(NULL, $options, t('Save content type'));
    $this->assertText(t('The content type Article has been updated.'), t('Node succesfully updated'));
    
    
    // Add a term reference field for the genres vocabulary to the question.
    $this->drupalGet('admin/structure/types/manage/questionnaire_question/fields');
    $tag1['fields[_add_existing_field][label]'] = 'genre';
    $tag1['fields[_add_existing_field][field_name]'] = 'field_genre';
    $tag1['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $tag1, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $tag1['fields[_add_existing_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Question content type saved successfully.'));
    
    
    //Add Two questions with different artists attached to them.
    $this->drupalGet("node/add/questionnaire-question");
    $question1['title'] = 'Do you consider Coldplay music soft rock?';
    $question1['questionnaire_question_type[und]'] = 'radios';
    $question1['questionnaire_question_options[und][0][value]'] = 'Yes';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question1['questionnaire_question_options[und][1][value]'] = 'No';
    $question1['field_genre[und]'] = '4';
    $this->drupalPost(NULL, $question1, t('Save'));
    $this->assertText(t('Question ' . $question1['title'] . ' has been created.'), t('Question created successfully.'));

    $this->drupalGet("node/add/questionnaire-question");
    $question2['title'] = 'Why do you like Soft rock?';
    $question2['questionnaire_question_type[und]'] = 'select';
    $question2['questionnaire_question_options[und][0][value]'] = 'I like all the vocals.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question2['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question2['field_genre[und]'] = '4';
    $this->drupalPost(NULL, $question2, t('Save'));
    $this->assertText(t('Question ' . $question2['title'] . ' has been created.'), t('Question created successfully.'));
    
    //Create an Album
    $this->drupalGet('node/add/album');
    $album['title'] = 'Ghosts';
    $album['field_genre[und]'] = '4';
    $this->drupalPost(NULL, $album, t('Save'));
    $this->assertText(t('Album ' . $album['title'] . ' has been created.'), t('Album created successfully.'));
    
    // Create an article and tag it with the album.
    $this->drupalGet('node/4/edit');
    $article['body[und][0][value]'] = 'This article should have a questionnaire with the question about soft rock.';
    $article['field_album[und]'] = '7';
    $this->drupalPost(NULL, $article, t('Save'));
    
    // Assert that the question has really been added to the questionnaire 
    // attached to this content
    $this->drupalGet('node/4/questions');
    $this->assertText(t('Do you consider Coldplay music soft rock?'), t('New Question successfully added to questionnaire created from a node.'));
    $this->assertText(t('Why do you like Soft rock?'), t('New Question successfully added to questionnaire created from a node.'));

  }

  /**
   * Function that tests whether a user can view the questions and submissions 
   * tabs on contexts that have questions and submissions added against them.
   * The node used in this test will be an article.
   */
  public function testContextQuestionsAndSubmissions() {
    // Create a questionnaire from an article
    $this->createQuestionnaireFromNodeDifferentContext();
    
    $this->drupalGet('node/3');
    $this->assertNoLink(t('Questions'), 0, 'Questions link not present for a context with no questions asked against it.');
    $this->assertNoLink(t('Submissions'), 0, 'Submissions link not present for a context with no submissions added against it.');
    
    // Add a submission to this questionnaire
    $this->drupalGet('node/4');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    $this->drupalGet('node/3');
    $this->assertLink(t('Questions'), 0, 'Questions link present for a context with questions asked against it.');
    $this->assertLink(t('Submissions'), 0, 'Submissions link present for a context with submissions added against it.');
    
    $this->clickLink(t('Submissions'), 0);
    $this->clickLink(t('edit'), 0);
    $this->assertNoResponse(403, t('Edit form for a submission can be accessed via the Contexts Submissions page.'));
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed on page.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed on page.'));
  }
  
  /**
   * Function that tests whether a user can view questions that are nolonger 
   * attached to the questionnaire when editing a submission that was made when 
   * those particular questions were still attached to the questionnaire.
   */
  public function testViewQuestionsSubmissions() {
    // Create a questionnaire from an article
    $this->createQuestionnaireFromNodeDifferentContext();
    
    // Add a submission to this questionnaire
    $this->drupalGet('node/4');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes, I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    $this->drupalGet('node/4/submissions');
    
    // Check that original questions are displayed on the form
    $this->clickLink(t('edit'), 0);
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed on page.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed on page.'));
    
    // Add a question that will be attached to the questionnaire after the 
    // context taxonomy term is changed.
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Indie rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the vocals.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $question, t('Save'));
    $this->assertText(t('Question ' . $question['title'] . ' has been created.'), t('Question created successfully.'));
    
    // Change the taxonomy term of the context, thereby changing the 
    // questions attached to the questionnaire.
    $this->drupalGet('node/3/edit');
    $song['title'] = 'Long way to the top';
    $song['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $song, t('Save'));
    
    // Navigate back to the questionnaire and check that new question is 
    // displayed on the form
    $this->drupalGet('node/4/questions');
    $this->assertNoText(t('Why do you like Hard rock?'), t('Question 1 nolonger displayed on page.'));
    $this->assertNoText(t('Do you consider ACDC metal?'), t('Question 2 nolonger displayed on page.'));
    $this->assertText(t('Why do you like Indie rock?'), t('New Question displayed on page.'));
    
    // Navigate back to the submissions edit page.
    $this->drupalGet('node/4/submissions');
    $this->clickLink(t('edit'), 0);
    // Check that original questions are still displayed on the form
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed on page.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed on page.'));
    $this->assertText(t('Why do you like Indie rock?'), t('New Question displayed on page.'));
  }

  /**
   * Function that tests whether all submissions are shown in the Submissions 
   * list of a questionnaire created a node regardless of the context of the 
   * submision.
   * The nodetype used as the questionnaire in this test will be article.
   */
  public function testSubmissionsReturned() {
    
    // Create a vocabulary
    $this->createVocabulary();
    
    // Create another vocabulary
    $vocabulary = new stdClass();
    $vocabulary->name = 'Genres';
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = 'genres';
    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;

    // Create 2 new terms programmatically.
    $newterm = new stdClass();
    $newterm->name = 'Hard Rock';
    $newterm->vid = $vid;
    $newterm->parent = 0;
    taxonomy_term_save($newterm);

    $newterm1 = new stdClass();
    $newterm1->name = 'Soft Rock';
    $newterm1->vid = $vid;
    $newterm1->parent = 0;
    taxonomy_term_save($newterm1);
    
    // Create a context, the song entity
    $this->drupalGet('admin/structure/types/add');
    $type['name'] = 'Song';
    $type['type'] = 'song';
    $type['description'] = '';
    $this->drupalPost(NULL, $type, t('Save and add fields'));
    $field['fields[_add_new_field][label]'] = 'artist';
    $field['fields[_add_new_field][field_name]'] = 'artist';
    $field['fields[_add_new_field][type]'] = 'taxonomy_term_reference';
    $field['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $field, t('Save'));
    $vocab['field[settings][allowed_values][0][vocabulary]'] = 'artists';
    $this->drupalPost(NULL, $vocab, t('Save field settings'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    
    // Create another context, the album entity
    $this->drupalGet('admin/structure/types/add');
    $type1['name'] = 'Album';
    $type1['type'] = 'album';
    $type1['description'] = '';
    $this->drupalPost(NULL, $type1, t('Save and add fields'));
    $genrefield['fields[_add_new_field][label]'] = 'genre';
    $genrefield['fields[_add_new_field][field_name]'] = 'genre';
    $genrefield['fields[_add_new_field][type]'] = 'taxonomy_term_reference';
    $genrefield['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $genrefield, t('Save'));
    $vocab1['field[settings][allowed_values][0][vocabulary]'] = 'genres';
    $this->drupalPost(NULL, $vocab1, t('Save field settings'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    $this->drupalPost(NULL, NULL, t('Save'));
        
    // Add a term reference field to the article content type.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $artfield['fields[_add_existing_field][label]'] = 'artist';
    $artfield['fields[_add_existing_field][field_name]'] = 'field_artist';
    $artfield['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $artfield, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));   
    $this->drupalPost(NULL, NULL, t('Save'));
    
    
    // Add a term reference field for the artists vocabulary to the question.
    $this->drupalGet('admin/structure/types/manage/questionnaire_question/fields');
    $tag['fields[_add_existing_field][label]'] = 'artist';
    $tag['fields[_add_existing_field][field_name]'] = 'field_artist';
    $tag['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $tag, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    
    
    // Add a term reference field for the genres vocabulary to the question.
    $this->drupalGet('admin/structure/types/manage/questionnaire_question/fields');
    $tag1['fields[_add_existing_field][label]'] = 'genre';
    $tag1['fields[_add_existing_field][field_name]'] = 'field_genre';
    $tag1['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $tag1, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $tag1['fields[_add_existing_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Question content type saved successfully.'));
    
    
    //Add questions with the same artist attached to them.    
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Hard rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the instruments.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    
    $this->drupalGet("node/add/questionnaire-question");
    $question1['title'] = 'Do you consider ACDC metal?';
    $question1['questionnaire_question_type[und]'] = 'select';
    $question1['questionnaire_question_options[und][0][value]'] = 'Yes I do.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question1['questionnaire_question_options[und][1][value]'] = 'No I dont.';
    $question1['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question1, t('Save'));    
    
    $this->drupalGet("node/add/questionnaire-question");
    $question2['title'] = 'Why do you like Indie rock?';
    $question2['questionnaire_question_type[und]'] = 'select';
    $question2['questionnaire_question_options[und][0][value]'] = 'I like all the vocals.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question2['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question2['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $question2, t('Save'));
    $this->assertText(t('Question ' . $question2['title'] . ' has been created.'), t('Question created successfully.'));
    
    //Add questions with the same genre attached to them. 
    $this->drupalGet("node/add/questionnaire-question");
    $question3['title'] = 'Do you consider Coldplay music soft rock?';
    $question3['questionnaire_question_type[und]'] = 'radios';
    $question3['questionnaire_question_options[und][0][value]'] = 'Yes';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question3['questionnaire_question_options[und][1][value]'] = 'No';
    $question3['field_genre[und]'] = '4';
    $this->drupalPost(NULL, $question3, t('Save'));
    $this->assertText(t('Question ' . $question3['title'] . ' has been created.'), t('Question created successfully.'));

    $this->drupalGet("node/add/questionnaire-question");
    $question4['title'] = 'Why do you like Soft rock?';
    $question4['questionnaire_question_type[und]'] = 'select';
    $question4['questionnaire_question_options[und][0][value]'] = 'I like all the vocals.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question4['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question4['field_genre[und]'] = '4';
    $this->drupalPost(NULL, $question4, t('Save'));
    $this->assertText(t('Question ' . $question4['title'] . ' has been created.'), t('Question created successfully.'));    
    
    // Edit the structure of the article content type
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this
    // content type.
    $options['questionnaire_question_isquestionnaire'] = TRUE;
    $options['questionnaire_question_vocabulary'] = 'artists';
    $options['questionnaire_question_context'] = '';
    $this->drupalPost(NULL, $options, t('Save content type'));
    
    // Create an article and tag it with an term from the vocabulary.
    $this->drupalGet('node/add/article');
    $article['title'] = 'Test Article';
    $article['body[und][0][value]'] = 'This article should have a questionnaire with the questions about hard rock.';
    $article['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $article, t('Save'));

    // Add a submission to this questionnaire
    $this->drupalGet('node/6');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    
    // Check that the correct questions are displayed for the first submission
    $this->drupalGet('node/6/submissions'); 
    $this->clickLink(t('edit'), 0);
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    // Edit the questionnaire so that it's context is the song entity
     
    // Add an entity reference field for the song context to the article content
    // type.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $songfield['fields[_add_new_field][label]'] = 'song';
    $songfield['fields[_add_new_field][field_name]'] = 'song';
    $songfield['fields[_add_new_field][type]'] = 'entityreference';
    $songfield['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $songfield, t('Save'));
    $songbundle['field[settings][handler_settings][target_bundles][song]'] = 'TRUE';
    $this->drupalPost(NULL, $songbundle, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText(t('Updated field ' . $songfield['fields[_add_new_field][label]'] . ' field settings.'), t('Field settings have been saved'));
    $this->drupalPost(NULL, NULL, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $songfield['fields[_add_new_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Article content type saved successfully.'));
    
    
    // Check that the correct questions are displayed for the first submission
    $this->drupalGet('node/6/editsubmission/1');    
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    // Edit the structure of the article content type.
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this 
    // content type.
    $options1['questionnaire_question_vocabulary'] = 'artists';
    $options1['questionnaire_question_context'] = 'field_song';
    $this->drupalPost(NULL, $options1, t('Save content type'));
    $this->assertText(t('The content type Article has been updated.'), t('Node succesfully updated'));
    
    // Check that the correct questions are displayed for the first submission
    $this->drupalGet('node/6/editsubmission/1');    
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    // Add a Song
    $this->drupalGet('node/add/song');
    $song['title'] = 'Once I was an eagle';
    $song['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $song, t('Save'));
    $this->assertText(t('Song ' . $song['title'] . ' has been created.'), t('Song created successfully.'));
    
    // Check that the correct questions are displayed for the first submission
    $this->drupalGet('node/6/editsubmission/1');    
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    // Edit the article and tag it with the song you just created.
    $this->drupalGet('node/6/edit');
    $edit['body[und][0][value]'] = 'This article should have a questionnaire with the question about indie rock.';
    $edit['field_song[und]'] = '7';
    $this->drupalPost(NULL, $edit, t('Save'));
    
    // Check that the correct questions are displayed for the first submission
    $this->drupalGet('node/6/editsubmission/1');    
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    
    // Add another submission to this questionnaire
    $this->drupalGet('node/6');
    $this->clickLink(t('Add Submission'), 0);
    $submission1['3'] = 'I just do.';
    $this->drupalPost(NULL, $submission1, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    // Assert there is an edit link for each submission made.
    $this->drupalGet('node/6/submissions');    
    
    // Check that the correct questions are displayed for the first submission
    $this->clickLink(t('edit'), 0);
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    // Edit the questionnaire so that it's context is the album entity
    
    // Add an entity reference field for the album entity to the article.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $albumfield['fields[_add_new_field][label]'] = 'album';
    $albumfield['fields[_add_new_field][field_name]'] = 'album';
    $albumfield['fields[_add_new_field][type]'] = 'entityreference';
    $albumfield['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $albumfield, t('Save'));
    $albumbundle['field[settings][handler_settings][target_bundles][album]'] = 'TRUE';
    $this->drupalPost(NULL, $albumbundle, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText(t('Updated field ' . $albumfield['fields[_add_new_field][label]'] . ' field settings.'), t('Field settings have been saved'));
    $this->drupalPost(NULL, NULL, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $albumfield['fields[_add_new_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Article content type saved successfully.'));
    
    // Check that the correct questions are displayed for the first submission
    $this->drupalGet('node/6/editsubmission/1');    
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    // Edit the structure of the article content type
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this 
    // content type.
    $options2['questionnaire_question_vocabulary'] = 'genres';
    $options2['questionnaire_question_context'] = 'field_album';
    $this->drupalPost(NULL, $options2, t('Save content type'));
    $this->assertText(t('The content type Article has been updated.'), t('Node succesfully updated'));
    
    // Check that the correct questions are displayed for the first submission
    $this->drupalGet('node/6/submissions'); 
    $this->clickLink(t('edit'), 0);
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    //Create an Album
    $this->drupalGet('node/add/album');
    $album['title'] = 'Ghosts';
    $album['field_genre[und]'] = '4';
    $this->drupalPost(NULL, $album, t('Save'));
    $this->assertText(t('Album ' . $album['title'] . ' has been created.'), t('Album created successfully.'));
    
    
    // Check that the correct questions are displayed for the first submission
    $this->drupalGet('node/6/submissions'); 
    $this->clickLink(t('edit'), 0);
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    // Edit article and tag it with an term from the vocabulary.
    $this->drupalGet('node/6/edit');
    $edit1['body[und][0][value]'] = 'This article should have a questionnaire with the question about soft rock.';
    $edit1['field_album[und]'] = '8';
    $this->drupalPost(NULL, $edit1, t('Save'));
    
    
    // Check that the correct questions are displayed for the first submission
    $this->drupalGet('node/6/submissions'); 
    $this->clickLink(t('edit'), 0);
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
   
    // Add a third submission to this questionnaire
    $this->drupalGet('node/6');
    $this->clickLink(t('Add Submission'), 0);
    $submission2['4'] = 'No';
    $submission2['5'] = 'I just do.';
    $this->drupalPost(NULL, $submission2, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    // Check that the correct questions are displayed for the first submission
    $this->drupalGet('node/6/editsubmission/1');    
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    // Navigate to the Article's submissions.
    // Assert there is an edit link for each submission made.
    $this->drupalGet('node/6/submissions');
    $this->assertLink(t('edit'), 0, t('Link for first submission present'));
    $this->assertLink(t('edit'), 1, t('Link for second submission present'));
    $this->assertLink(t('edit'), 2, t('Link for third submission present'));
    
    // Check that the correct questions are displayed for each submission
    $this->clickLink(t('edit'), 0);
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    
    $this->drupalGet('node/6/submissions');
    $this->clickLink(t('edit'), 1);
    $this->assertText(t('Why do you like Indie rock?'), t('Question 1 displayed for second submission.'));
    $this->assertOptionSelected('edit-3', t('I just do.'), t('Correct option displayed for Question 1.'));
    
    
    $this->drupalGet('node/6/submissions');
    $this->clickLink(t('edit'), 2);
    $this->assertText(t('Do you consider Coldplay music soft rock?'), t('Question 1 displayed for third submission.'));
    $this->assertRaw('<input type="radio" id="edit-4-no" name="4" value="No" checked="checked" class="form-radio" />', t('Correct option displayed for Question 1.'));
    $this->assertText(t('Why do you like Soft rock?'), t('Question 2 displayed for third submission.'));
    $this->assertOptionSelected('edit-5', t('I just do.'), t('Correct option displayed for Question 2.'));    
  }
}
/**
 * Tests the different scenarios that can occur when creating views for answers.
 */
class QuestionnaireAnswerViewsTestCase extends QuestionnaireWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => t('Questionnaire Answers Views And Permissions'),
      'description' => t('Tests the different scenarios that can occur when creating views for answers.'),
      'group' => t('Questionnaire'));
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('questionnaire', 'views', 'views_ui'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }
  
  /**
   * Function that tests whether all term fields are shown in the view for 
   * answers if the copy term fields from context checkbox is checked for the 
   * entity type.
   */
  public function testCopyTermfieldsToAnswers() {
    
    // Create a vocabulary
    $this->createVocabulary();
    
    // Create another vocabulary
    $vocabulary = new stdClass();
    $vocabulary->name = 'Genres';
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = 'genres';
    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;

    // Create 2 new terms programmatically.
    $newterm = new stdClass();
    $newterm->name = 'Hard Rock';
    $newterm->vid = $vid;
    $newterm->parent = 0;
    taxonomy_term_save($newterm);

    $newterm1 = new stdClass();
    $newterm1->name = 'Soft Rock';
    $newterm1->vid = $vid;
    $newterm1->parent = 0;
    taxonomy_term_save($newterm1);
    
    // Create a context, the song entity
    $this->drupalGet('admin/structure/types/add');
    $type['name'] = 'Song';
    $type['type'] = 'song';
    $type['description'] = '';
    $this->drupalPost(NULL, $type, t('Save and add fields'));
    $field['fields[_add_new_field][label]'] = 'artist';
    $field['fields[_add_new_field][field_name]'] = 'artist';
    $field['fields[_add_new_field][type]'] = 'taxonomy_term_reference';
    $field['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $field, t('Save'));
    $vocab['field[settings][allowed_values][0][vocabulary]'] = 'artists';
    $this->drupalPost(NULL, $vocab, t('Save field settings'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    
    // Create another context, the album entity
    $this->drupalGet('admin/structure/types/add');
    $type1['name'] = 'Album';
    $type1['type'] = 'album';
    $type1['description'] = '';
    $this->drupalPost(NULL, $type1, t('Save and add fields'));
    $genrefield['fields[_add_new_field][label]'] = 'genre';
    $genrefield['fields[_add_new_field][field_name]'] = 'genre';
    $genrefield['fields[_add_new_field][type]'] = 'taxonomy_term_reference';
    $genrefield['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $genrefield, t('Save'));
    $vocab1['field[settings][allowed_values][0][vocabulary]'] = 'genres';
    $this->drupalPost(NULL, $vocab1, t('Save field settings'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    $this->drupalPost(NULL, NULL, t('Save'));
        
    // Add a term reference field to the article content type.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $artfield['fields[_add_existing_field][label]'] = 'artist';
    $artfield['fields[_add_existing_field][field_name]'] = 'field_artist';
    $artfield['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $artfield, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));   
    $this->drupalPost(NULL, NULL, t('Save'));
    
    
    // Add a term reference field for the artists vocabulary to the question.
    $this->drupalGet('admin/structure/types/manage/questionnaire_question/fields');
    $tag['fields[_add_existing_field][label]'] = 'artist';
    $tag['fields[_add_existing_field][field_name]'] = 'field_artist';
    $tag['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $tag, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    $this->drupalPost(NULL, NULL, t('Save'));    
    
    // Add a term reference field for the genres vocabulary to the question.
    $this->drupalGet('admin/structure/types/manage/questionnaire_question/fields');
    $tag1['fields[_add_existing_field][label]'] = 'genre';
    $tag1['fields[_add_existing_field][field_name]'] = 'field_genre';
    $tag1['fields[_add_existing_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $tag1, t('Save'));
    $this->drupalPost(NULL, NULL, t('Save settings'));    
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $tag1['fields[_add_existing_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Question content type saved successfully.'));
    
    
    //Add questions with the same artist attached to them.    
    $this->drupalGet("node/add/questionnaire-question");
    $question['title'] = 'Why do you like Hard rock?';
    $question['questionnaire_question_type[und]'] = 'select';
    $question['questionnaire_question_options[und][0][value]'] = 'I like all the instruments.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question, t('Save'));
    
    $this->drupalGet("node/add/questionnaire-question");
    $question1['title'] = 'Do you consider ACDC metal?';
    $question1['questionnaire_question_type[und]'] = 'select';
    $question1['questionnaire_question_options[und][0][value]'] = 'Yes I do.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question1['questionnaire_question_options[und][1][value]'] = 'No I dont.';
    $question1['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $question1, t('Save'));    
    
    $this->drupalGet("node/add/questionnaire-question");
    $question2['title'] = 'Why do you like Indie rock?';
    $question2['questionnaire_question_type[und]'] = 'select';
    $question2['questionnaire_question_options[und][0][value]'] = 'I like all the vocals.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question2['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question2['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $question2, t('Save'));
    $this->assertText(t('Question ' . $question2['title'] . ' has been created.'), t('Question created successfully.'));
    
    $this->drupalGet("node/add/questionnaire-question");
    $question3['title'] = 'Do you consider Coldplay music soft rock?';
    $question3['questionnaire_question_type[und]'] = 'radios';
    $question3['questionnaire_question_options[und][0][value]'] = 'Yes';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question3['questionnaire_question_options[und][1][value]'] = 'No';
    $question3['field_genre[und]'] = '4';
    $this->drupalPost(NULL, $question3, t('Save'));
    $this->assertText(t('Question ' . $question3['title'] . ' has been created.'), t('Question created successfully.'));

    $this->drupalGet("node/add/questionnaire-question");
    $question4['title'] = 'Why do you like Soft rock?';
    $question4['questionnaire_question_type[und]'] = 'select';
    $question4['questionnaire_question_options[und][0][value]'] = 'I like all the vocals.';
    $this->drupalPostAJAX(NULL, NULL,  array('questionnaire_question_options_add_more' => t('Add another item')));
    $question4['questionnaire_question_options[und][1][value]'] = 'I just do.';
    $question4['field_genre[und]'] = '4';
    $this->drupalPost(NULL, $question4, t('Save'));
    $this->assertText(t('Question ' . $question4['title'] . ' has been created.'), t('Question created successfully.'));    
    
    // Edit the structure of the article content type
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this
    // content type.
    $options['questionnaire_question_isquestionnaire'] = TRUE;
    $options['questionnaire_question_vocabulary'] = 'artists';
    $options['questionnaire_question_context'] = '';
    $options['questionnaire_question_copy_termfields_from_context'] = TRUE;
    $this->drupalPost(NULL, $options, t('Save content type'));
    
    // Create an article and tag it with an term from the vocabulary.
    $this->drupalGet('node/add/article');
    $article['title'] = 'Test Article';
    $article['body[und][0][value]'] = 'This article should have a questionnaire with the questions about hard rock.';
    $article['field_artist[und]'] = '1';
    $this->drupalPost(NULL, $article, t('Save'));

    // Add a submission to this questionnaire
    $this->drupalGet('node/6');
    $this->clickLink(t('Add Submission'), 0);
    $submission['1'] = 'I like all the instruments.';
    $submission['2'] = 'Yes I do.';
    $this->drupalPost(NULL, $submission, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    // Edit the questionnaire so that it's context is the song entity
     
    // Add an entity reference field for the song context to the article content
    // type.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $songfield['fields[_add_new_field][label]'] = 'song';
    $songfield['fields[_add_new_field][field_name]'] = 'song';
    $songfield['fields[_add_new_field][type]'] = 'entityreference';
    $songfield['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $songfield, t('Save'));
    $songbundle['field[settings][handler_settings][target_bundles][song]'] = 'TRUE';
    $this->drupalPost(NULL, $songbundle, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText(t('Updated field ' . $songfield['fields[_add_new_field][label]'] . ' field settings.'), t('Field settings have been saved'));
    $this->drupalPost(NULL, NULL, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $songfield['fields[_add_new_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Article content type saved successfully.'));
    
    // Edit the structure of the article content type.
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this 
    // content type.
    $options1['questionnaire_question_vocabulary'] = 'artists';
    $options1['questionnaire_question_context'] = 'field_song';
    $this->drupalPost(NULL, $options1, t('Save content type'));
    $this->assertText(t('The content type Article has been updated.'), t('Node succesfully updated'));
    
    // Add a Song
    $this->drupalGet('node/add/song');
    $song['title'] = 'Once I was an eagle';
    $song['field_artist[und]'] = '2';
    $this->drupalPost(NULL, $song, t('Save'));
    $this->assertText(t('Song ' . $song['title'] . ' has been created.'), t('Song created successfully.'));
    
    // Edit the article and tag it with the song you just created.
    $this->drupalGet('node/6/edit');
    $edit['body[und][0][value]'] = 'This article should have a questionnaire with the question about indie rock.';
    $edit['field_song[und]'] = '7';
    $this->drupalPost(NULL, $edit, t('Save'));    
    
    // Add another submission to this questionnaire
    $this->drupalGet('node/6');
    $this->clickLink(t('Add Submission'), 0);
    $submission1['3'] = 'I just do.';
    $this->drupalPost(NULL, $submission1, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    // Edit the questionnaire so that it's context is the album entity
    
    // Add an entity reference field for the album entity to the article.
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $albumfield['fields[_add_new_field][label]'] = 'album';
    $albumfield['fields[_add_new_field][field_name]'] = 'album';
    $albumfield['fields[_add_new_field][type]'] = 'entityreference';
    $albumfield['fields[_add_new_field][widget_type]'] = 'options_select';
    $this->drupalPost(NULL, $albumfield, t('Save'));
    $albumbundle['field[settings][handler_settings][target_bundles][album]'] = 'TRUE';
    $this->drupalPost(NULL, $albumbundle, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText(t('Updated field ' . $albumfield['fields[_add_new_field][label]'] . ' field settings.'), t('Field settings have been saved'));
    $this->drupalPost(NULL, NULL, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText(t('Saved ' . $albumfield['fields[_add_new_field][label]'] . ' configuration.'), t('Field configurations have been saved'));    
    $this->drupalPost(NULL, NULL, t('Save'));
    // Assert that the content type is saved.
    $this->assertText(t('Your settings have been saved.'), t('Article content type saved successfully.'));
    
    // Edit the structure of the article content type
    $this->drupalGet('admin/structure/types/manage/article');
    // Check the boxes that enable a user to create a questionnaire from this 
    // content type.
    $options2['questionnaire_question_vocabulary'] = 'genres';
    $options2['questionnaire_question_context'] = 'field_album';
    $this->drupalPost(NULL, $options2, t('Save content type'));
    $this->assertText(t('The content type Article has been updated.'), t('Node succesfully updated'));
    
    //Create an Album
    $this->drupalGet('node/add/album');
    $album['title'] = 'Ghosts';
    $album['field_genre[und]'] = '4';
    $this->drupalPost(NULL, $album, t('Save'));
    $this->assertText(t('Album ' . $album['title'] . ' has been created.'), t('Album created successfully.'));
    
    // Edit article and tag it with an term from the vocabulary.
    $this->drupalGet('node/6/edit');
    $edit1['body[und][0][value]'] = 'This article should have a questionnaire with the question about soft rock.';
    $edit1['field_album[und]'] = '8';
    $this->drupalPost(NULL, $edit1, t('Save'));
   
    // Add a third submission to this questionnaire
    $this->drupalGet('node/6');
    $this->clickLink(t('Add Submission'), 0);
    $submission2['4'] = 'No';
    $submission2['5'] = 'I just do.';
    $this->drupalPost(NULL, $submission2, 'Submit');
    $this->assertText(t('Thank you for your submission'), t('Submission added successfully.'));
    
    // Navigate to the Article's submissions.
    // Assert there is an edit link for each submission made.
    $this->drupalGet('node/6/submissions');
    $this->assertLink(t('edit'), 0, t('Link for first submission present'));
    $this->assertLink(t('edit'), 1, t('Link for second submission present'));
    $this->assertLink(t('edit'), 2, t('Link for third submission present'));
    
    // Check that the correct questions are displayed for each submission
    $this->clickLink(t('edit'), 0);
    $this->assertText(t('Why do you like Hard rock?'), t('Question 1 displayed for first submission.'));
    $this->assertOptionSelected('edit-1', t('I like all the instruments.'), t('Correct option displayed for Question 1.'));
    $this->assertText(t('Do you consider ACDC metal?'), t('Question 2 displayed for first submission.'));
    $this->assertOptionSelected('edit-2', t('Yes I do.'), t('Correct option displayed for Question 2.'));
    
    
    $this->drupalGet('node/6/submissions');
    $this->clickLink(t('edit'), 1);
    $this->assertText(t('Why do you like Indie rock?'), t('Question 1 displayed for second submission.'));
    $this->assertOptionSelected('edit-3', t('I just do.'), t('Correct option displayed for Question 1.'));
    
    
    $this->drupalGet('node/6/submissions');
    $this->clickLink(t('edit'), 2);
    $this->assertText(t('Do you consider Coldplay music soft rock?'), t('Question 1 displayed for third submission.'));
    $this->assertRaw('<input type="radio" id="edit-4-no" name="4" value="No" checked="checked" class="form-radio" />', t('Correct option displayed for Question 1.'));
    $this->assertText(t('Why do you like Soft rock?'), t('Question 2 displayed for third submission.'));
    $this->assertOptionSelected('edit-5', t('I just do.'), t('Correct option displayed for Question 2.'));
    
    // Create a view for the answers
    $this->drupalGet('admin/structure/views/add');
    $view['human_name'] = 'Answers';
    $view['show[wizard_key]'] =  'questionnaire_answer';
    $this->drupalPostAJAX(NULL, $view, 'show[wizard_key]');
    $view['page[title]'] = 'Answers';
    $view['name'] = 'answers';
    $view['page[path]'] = 'answers';
    $this->drupalPost(NULL, $view, t('Continue & edit'));
    $this->clickLink(t('Add'), 0);
    $viewfields['name[questionnaire_answer.answertext]'] = TRUE;
    $viewfields['name[views_entity_questionnaire_answer.question]'] = TRUE;
    $viewfields['name[views_entity_questionnaire_answer.questionnaire_id]'] = TRUE;
    $viewfields['name[field_data_field_artist.field_artist$1]'] = TRUE;
    $viewfields['name[field_data_field_genre.field_genre$1]'] = TRUE;
    $this->drupalPost(NULL, $viewfields, t('Add and configure fields'));
    $this->drupalPost(NULL, NULL, t('Apply and continue'));
    $this->drupalPost(NULL, NULL, t('Apply and continue'));
    $this->drupalPost(NULL, NULL, t('Apply and continue'));
    $this->drupalPost(NULL, NULL, t('Apply'));
    $this->drupalPost(NULL, NULL, t('Apply'));
    $this->drupalPost(NULL, NULL, t('Save'));
    $this->assertText(t('The view Answers has been saved.'), 'The view Answers successfully saved.');
    
    // Assert that the term reference field from the context for each answer is
    // present.
    $this->drupalGet('/answers');
    
    $this->assertLink(t('ACDC'), 0, t('Link for term for first answer of first submission present'));
    $this->assertLink(t('ACDC'), 1, t('Link for term for second answer of first submission present'));
    $this->assertLink(t('Laura Marling'), 0, t('Link for term for answer of second submission present'));
    $this->assertLink(t('Soft Rock'), 0, t('Link for term for first answer of third submission present'));
    $this->assertLink(t('Soft Rock'), 1, t('Link for term for second answer of third submission present'));    
  }
  
  /**
   * Test view questionnaire answers permission.
   */
  public function testViewQuestionnaireAnswersPermission() {
    // Create a questionnaire and add a submission.
    $this->addSubmission();
    // Create a view for the answers
    $this->drupalGet('admin/structure/views/add');
    $view['human_name'] = 'Answers';
    $view['show[wizard_key]'] =  'questionnaire_answer';
    $this->drupalPostAJAX(NULL, $view, 'show[wizard_key]');
    $view['page[title]'] = 'Answers';
    $view['name'] = 'answers';
    $view['page[path]'] = 'answers';
    $this->drupalPost(NULL, $view, t('Continue & edit'));
    $this->clickLink(t('Add'), 0);
    $viewfields['name[questionnaire_answer.answertext]'] = TRUE;
    $viewfields['name[views_entity_questionnaire_answer.rendered_entity]'] = TRUE;
    $this->drupalPost(NULL, $viewfields, t('Add and configure fields'));
    $this->drupalPost(NULL, NULL, t('Apply'));
    $this->drupalPost(NULL, NULL, t('Apply'));
    $this->drupalPost(NULL, NULL, t('Save'));
    $this->assertText(t('The view Answers has been saved.'), 'The view Answers successfully saved.');
    // Logout and try to login as a use that does not have the permission
    $this->drupalLogout();
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);
    // Navigate to the Questionnaire Answers page.
    $this->drupalGet('/answers');
    // Assert that a user without the permission cannot view answer links    
    $answer1 = $this->assertNoLink(t('1'), 0, t('Link for first answer absent'));
    $answer2 = $this->assertNoLink(t('2'), 0, t('Link for second answer absent'));
    $answer3 = $this->assertNoLink(t('3'), 0, t('Link for third answer absent'));
    $answer4 = $this->assertNoLink(t('4'), 0, t('Link for fourth answer absent'));
    $answer5 = $this->assertNoLink(t('5'), 0, t('Link for fifth answer absent'));
    
    if ($answer1 && $answer2 && $answer3 && $answer4 && $answer5) {
      $this->pass('A user without the permission cannot view links to Questionnaire Answers.');
    }
    
    //Create a user with the permission and login.
    $user = $this->drupalCreateUser(array('view questions', 'view questionnaire', 'view questionnaire answers'));
    $this->drupalLogin($user);
    // Navigate to the Questionnaire Answers page.
    $this->drupalGet('/answers');
    // Assert that a user with the permission can view answer links    
    $answer1 = $this->assertLink(t('1'), 0, t('Link for first answer present'));
    $answer2 = $this->assertLink(t('2'), 0, t('Link for second answer present'));
    $answer3 = $this->assertLink(t('3'), 0, t('Link for third answer present'));
    $answer4 = $this->assertLink(t('4'), 0, t('Link for fourth answer present'));
    $answer5 = $this->assertLink(t('5'), 0, t('Link for fifth answer present'));
    
    if ($answer1 && $answer2 && $answer3 && $answer4 && $answer5) {
      $this->pass('A user with the permission can view links to Questionnaire Answers.');
    }
  } 
}
/**
 * Tests the Questionnaire Fuzzy Interface and Functions.
 */
class QuestionnaireFuzzyTestCase extends QuestionnaireWebTestCase {
  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => t('Questionnaire Fuzzy Interface Tests'),
      'description' => t('Tests the Questionnaire Fuzzy Interface and Functions.'),
      'group' => t('Questionnaire'));
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('questionnaire', 'questionnaire_default_views', 'questionnaire_fuzzy'));

    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }

  /**
   * Function that tests whether all fuzzy answers are picked up by the module
   * and those that need a user's attention are shown in the interface.
   */
  public function testFuzzyAnswersDetectionViaNextTab() {
    // Create a test questionnaire.
    $this->addSubmission();

    // Update the answer entries in the database so they are fuzzy.
    $answer_1 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'female',
      ))
      ->condition('answer', 'Female')
      ->execute();
    $answer_2 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'Classic',
      ))
      ->condition('answer', 'Classic Rock')
      ->execute();
    $answer_3 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'soft Rock',
      ))
      ->condition('answer', 'Soft Rock')
      ->execute();
    $answer_4 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'pruple',
      ))
      ->condition('answer', 'Purple')
      ->execute();
    $answer_6 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'acd',
      ))
      ->condition('answer', 'ACDC')
      ->execute();

    // Ensure that the user is prompted to edit only two of the fuzzy answers.
    $this->drupalGet('/questionnaire');
    $this->clickLink('Next');

    $this->assertRaw('<b> Raw Answer :</b> Classic', 'Fuzzy Answer \'Classic\' detected.');
    $fix_answer_2['answer[Classic Rock]'] = TRUE;
    $this->drupalPost(NULL, $fix_answer_2, t('Submit'));
    $this->assertText(t('Fuzzy Answer Classic has been changed to Classic Rock.'), t('User is notified of the changes made.'));

    $this->assertRaw('<b> Raw Answer :</b> pruple', 'Fuzzy Answer \'pruple\' detected.');
    $fix_answer_4['answer'] = 'Purple';
    $this->drupalPost(NULL, $fix_answer_4, t('Submit'));
    $this->assertText(t('Fuzzy Answer pruple has been changed to Purple.'), t('User is notified of the changes made.'));

    $this->assertRaw('<b> Raw Answer :</b> Sophie', 'Fuzzy Answer \'Sophie\' detected.');
    $fix_answer_5['answer'] = 'Sophie';
    $this->drupalPost(NULL, $fix_answer_5, t('Submit'));
    $this->assertText(t('Fuzzy Answer Sophie has been changed to Sophie.'), t('User is notified of the changes made.'));

    $this->assertRaw('<b> Raw Answer :</b> acd', 'Fuzzy Answer \'acd\' detected.');
    $fix_answer_6['answer'] = 'ACDC';
    $this->drupalPost(NULL, $fix_answer_6, t('Submit'));
    $this->assertText(t('Fuzzy Answer acd has been changed to ACDC.'), t('User is notified of the changes made.'));

    $this->assertText(t('No new fuzzy answer available'), t('Fuzzy answers have been edited.'));
  }

  /**
   * Function that tests whether all fuzzy answers can be edited if the user
   * chooses the question first and then the particular anser to edit.
   */
  public function testFuzzyAnswersDetectionViaReviewQuestionsTab() {
    // Create a test questionnaire.
    $this->addSubmission();

    // Update the answer entries in the database so they are fuzzy.
    $answer_1 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'femal',
      ))
      ->condition('answer', 'Female')
      ->execute();
    $answer_2 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'Classic',
      ))
      ->condition('answer', 'Classic Rock')
      ->execute();
    $answer_3 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'soft Rock',
      ))
      ->condition('answer', 'Soft Rock')
      ->execute();
    $answer_4 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'pruple',
      ))
      ->condition('answer', 'Purple')
      ->execute();

    $this->drupalGet('/questionnaire');
    $this->clickLink('Next');
    $this->clickLink('Review');

    $this->assertRaw('<b> Raw Answer :</b> femal', t('Correct fuzzy answer shown to user when Review tab is clicked.'));

    $this->clickLink('Review Answers');

    $this->assertText(t('There are no answers to verify.'), t('Correct notice shown to users when Review Answers tab is clicked.'));

    $this->clickLink('Review Questions');

    $this->assertLink(t('What is your gender?'), 0, t('Link for Question 1 present.'));
    $this->assertLink(t('What is your fave type of rock?'), 0, t('Link for Question 2 present.'));
    $this->assertLink(t('What is your fave colour?'), 0, t('Link for Question 3 present.'));
    $this->assertLink(t('What is your fave number?'), 0, t('Link for Question 4 present.'));
    $this->assertLink(t('Thank you for filling this questionnaire.'), 0, t('Link for Question 5 present.'));

    $this->clickLink('What is your gender?');
    $this->assertLink(t('8'), 0, t('Link for Answer 6 present.'));

    $this->clickLink('8');
    $this->assertRaw('<b> Raw Answer :</b> femal', t('Correct fuzzy answer shown to user when Answer 1 link is clicked.'));
    $fix_answer_8['answer'] = 'Female';
    $this->drupalPost(NULL, $fix_answer_8, t('Submit'));
    $this->assertText(t('Fuzzy Answer femal has been changed to Female.'), t('User is notified of the changes made.'));
    $this->assertText(t('Answer 1 does not require editing.'), t('User is notified that the answer nolonger requires editing.'));

    $this->clickLink('Review Questions');
    $this->clickLink('What is your gender?');
    $this->assertText(t('There are no answers to verify.'), t('Correct notice shown to users when A question with no fuzzy answers is chosen from the list.'));
  }

  /**
   * Function that tests whether all fuzzy answers that are picked up by the
   * module and need editing are saved properly.
   */
  public function testFuzzyAnswersEditForm() {
    // Create a test questionnaire.
    $this->addSubmission();

    // Update all the answer entries in the database so they are fuzzy.
    $answer_1 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'femal',
      ))
      ->condition('answer', 'Female')
      ->execute();
    $answer_2 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'Classic',
      ))
      ->condition('answer', 'Classic Rock')
      ->execute();
    $answer_3 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'soft Rck',
      ))
      ->condition('answer', 'Soft Rock')
      ->execute();
    $answer_4 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answertext' => '',
        'fuzzy' => 'pruple',
      ))
      ->condition('answer', 'Purple')
      ->execute();
    $answer_5 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'answernumber' => NULL,
        'fuzzy' => 'eighteen',
      ))
      ->condition('answer', '18')
      ->execute();

    // Ensure that the user is prompted to edit only two of the fuzzy answers.
    $this->drupalGet('/questionnaire');
    $this->clickLink('Next');

    // Select type question.
    $this->assertRaw('<b> Raw Answer :</b> femal', t('Fuzzy Answer \'femal\' detected.'));
    $fix_answer_1['answer'] = 'Female';
    $this->drupalPost(NULL, $fix_answer_1, t('Submit'));
    $this->assertText(t('Fuzzy Answer femal has been changed to Female.'), t('User is notified of the changes made.'));

    // Checkbox type questions.
    $this->assertRaw('<b> Raw Answer :</b> Classic', t('Fuzzy Answer \'Classic\' detected.'));
    $fix_answer_2['answer[Classic Rock]'] = TRUE;
    $this->drupalPost(NULL, $fix_answer_2, t('Submit'));
    $this->assertText(t('Fuzzy Answer Classic has been changed to Classic Rock.'), t('User is notified of the changes made.'));
    $this->assertRaw('<b> Raw Answer :</b> soft Rck', t('Fuzzy Answer \'soft Rck\' detected.'));
    $fix_answer_3['answer[Soft Rock]'] = TRUE;
    $this->drupalPost(NULL, $fix_answer_3, t('Submit'));
    $this->assertText(t('Fuzzy Answer soft Rck has been changed to Soft Rock.'), t('User is notified of the changes made.'));

    // Radio type questions
    $this->assertRaw('<b> Raw Answer :</b> pruple', t('Fuzzy Answer \'pruple\' detected.'));
    $fix_answer_4['answer'] = 'Purple';
    $this->drupalPost(NULL, $fix_answer_4, t('Submit'));
    $this->assertText(t('Fuzzy Answer pruple has been changed to Purple.'), t('User is notified of the changes made.'));

    // Number type questions
    $this->assertRaw('<b> Raw Answer :</b> eighteen', t('Fuzzy Answer \'eighteen\' detected.'));
    $fix_answer_5['answer'] = 18;
    $this->drupalPost(NULL, $fix_answer_5, t('Submit'));
    $this->assertText(t('Fuzzy Answer eighteen has been changed to 18.'), t('User is notified of the changes made.'));

    $this->assertRaw('<b> Raw Answer :</b> Sophie', 'Fuzzy Answer \'Sophie\' detected.');
    $fix_answer_6['answer'] = 'Sophie';
    $this->drupalPost(NULL, $fix_answer_6, t('Submit'));
    $this->assertText(t('Fuzzy Answer Sophie has been changed to Sophie.'), t('User is notified of the changes made.'));

    $this->assertText(t('No new fuzzy answer available'), t('Fuzzy answers have been edited.'));
  }

  /**
   * Function that tests Questionnaire fuzzy permissions.
   */
  public function testFuzzyPermissions() {
    // Create a test questionnaire.
    $this->addSubmission();

    // Update the answer entries in the database so they are fuzzy.
    $answer_1 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'fuzzy' => 'femal',
      ))
      ->condition('answer', 'Female')
      ->execute();
    $answer_2 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'fuzzy' => 'Classic',
      ))
      ->condition('answer', 'Classic Rock')
      ->execute();
    $answer_3 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'fuzzy' => 'soft Rock',
      ))
      ->condition('answer', 'Soft Rock')
      ->execute();
    $answer_4 = db_update('questionnaire_answer')
      ->fields(array(
        'answer' => '',
        'fuzzy' => 'pruple',
      ))
      ->condition('answer', 'Purple')
      ->execute();

    $this->drupalLogout();
    $user = $this->drupalCreateAuthUser();
    $this->drupalLogin($user);

    $this->drupalGet('questionnaire');

    $this->assertNoLink(t('Next'), t('A user without the update answers from fuzzy permission does not view the Next link for fuzzy answers.'));

    $this->drupalGet('questionnaire/fuzzy/answer/');

    $this->assertResponse(403);
    $this->assertText(t('Access denied'), t('A user without the update answers from fuzzy permission does not view the Answer edit form.'));

    $this->drupalGet('questionnaire/fuzzy/answers/');

    $this->assertResponse(403);
    $this->assertText(t('Access denied'), t('A user without the view fuzzy answers permission does not view the list of answers to review.'));

    $this->drupalGet('questionnaire/fuzzy/questions');

    $this->assertResponse(403);
    $this->assertText(t('Access denied'), t('A user without the view fuzzy answers permission does not view the list of questions to review.'));

    $this->drupalLogout();
    $user = $this->drupalCreateAuthUser(array('view fuzzy answers'));
    $this->drupalLogin($user);

    $this->drupalGet('questionnaire/fuzzy/questions');

    $this->assertResponse(200);
    $this->assertNoText(t('Access denied'), t('A user with the view fuzzy answers permission can view the list of questions to review.'));

    $this->clickLink('What is your gender?');

    $this->assertResponse(200);
    $this->assertNoText(t('Access denied'), t('A user with the view fuzzy answers permission can view the list of answers to review.'));

    $this->drupalLogout();
    $user = $this->drupalCreateAuthUser(array('update answers from fuzzy'));
    $this->drupalLogin($user);

    $this->drupalGet('questionnaire/fuzzy');

    $this->assertResponse(200);
    $this->assertNoText(t('Access denied'), t('A user with the update answers from fuzzy permission can view the Answer edit form.'));

    $this->clickLink('Review');

    $this->assertResponse(200);
    $this->assertNoText(t('Access denied'), t('A user with the update answers from fuzzy permission can view the Answer edit form.'));
  }
}
